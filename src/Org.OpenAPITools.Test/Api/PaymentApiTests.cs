/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.3.0.20210608.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing PaymentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PaymentApiTests : IDisposable
    {
        private PaymentApi instance;

        public PaymentApiTests()
        {
            instance = new PaymentApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PaymentApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PaymentApi
            //Assert.IsType(typeof(PaymentApi), instance, "instance is a PaymentApi");
        }

        
        /// <summary>
        /// Test FinalizeSecureTransaction
        /// </summary>
        [Fact]
        public void FinalizeSecureTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //string clientRequestId = null;
            //string apiKey = null;
            //long timestamp = null;
            //string transactionId = null;
            //AuthenticationUpdateRequest authenticationUpdateRequest = null;
            //string messageSignature = null;
            //string region = null;
            //var response = instance.FinalizeSecureTransaction(contentType, clientRequestId, apiKey, timestamp, transactionId, authenticationUpdateRequest, messageSignature, region);
            //Assert.IsType<TransactionResponse> (response, "response is TransactionResponse");
        }
        
        /// <summary>
        /// Test SubmitPrimaryTransaction
        /// </summary>
        [Fact]
        public void SubmitPrimaryTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //string clientRequestId = null;
            //string apiKey = null;
            //long timestamp = null;
            //PrimaryTransaction primaryTransaction = null;
            //string messageSignature = null;
            //string region = null;
            //var response = instance.SubmitPrimaryTransaction(contentType, clientRequestId, apiKey, timestamp, primaryTransaction, messageSignature, region);
            //Assert.IsType<TransactionResponse> (response, "response is TransactionResponse");
        }
        
        /// <summary>
        /// Test SubmitSecondaryTransaction
        /// </summary>
        [Fact]
        public void SubmitSecondaryTransactionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //string clientRequestId = null;
            //string apiKey = null;
            //long timestamp = null;
            //string transactionId = null;
            //SecondaryTransaction secondaryTransaction = null;
            //string messageSignature = null;
            //string region = null;
            //string storeId = null;
            //var response = instance.SubmitSecondaryTransaction(contentType, clientRequestId, apiKey, timestamp, transactionId, secondaryTransaction, messageSignature, region, storeId);
            //Assert.IsType<TransactionResponse> (response, "response is TransactionResponse");
        }
        
        /// <summary>
        /// Test TransactionInquiry
        /// </summary>
        [Fact]
        public void TransactionInquiryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string contentType = null;
            //string clientRequestId = null;
            //string apiKey = null;
            //long timestamp = null;
            //string transactionId = null;
            //string messageSignature = null;
            //string region = null;
            //string storeId = null;
            //var response = instance.TransactionInquiry(contentType, clientRequestId, apiKey, timestamp, transactionId, messageSignature, region, storeId);
            //Assert.IsType<TransactionResponse> (response, "response is TransactionResponse");
        }
        
    }

}
