/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.3.0.20210608.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentTokenApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a payment token from a payment card.
        /// </summary>
        /// <remarks>
        /// Use this to create a payment token from a payment card.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentTokenizationRequest">Accepted request types: PaymentCardPaymentTokenizationRequest, PaymentDevicePaymentTokenizationRequest, and ReferencedOrderPaymentTokenizationRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>PaymentTokenizationResponse</returns>
        PaymentTokenizationResponse CreatePaymentToken (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentTokenizationRequest paymentTokenizationRequest, string messageSignature = null, string authorization = null, string region = null);

        /// <summary>
        /// Create a payment token from a payment card.
        /// </summary>
        /// <remarks>
        /// Use this to create a payment token from a payment card.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentTokenizationRequest">Accepted request types: PaymentCardPaymentTokenizationRequest, PaymentDevicePaymentTokenizationRequest, and ReferencedOrderPaymentTokenizationRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>ApiResponse of PaymentTokenizationResponse</returns>
        ApiResponse<PaymentTokenizationResponse> CreatePaymentTokenWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentTokenizationRequest paymentTokenizationRequest, string messageSignature = null, string authorization = null, string region = null);
        /// <summary>
        /// Delete a payment token.
        /// </summary>
        /// <remarks>
        /// Use this to delete a payment token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>PaymentTokenizationResponse</returns>
        PaymentTokenizationResponse DeletePaymentToken (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = null, string authorization = null, string region = null, string storeId = null);

        /// <summary>
        /// Delete a payment token.
        /// </summary>
        /// <remarks>
        /// Use this to delete a payment token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>ApiResponse of PaymentTokenizationResponse</returns>
        ApiResponse<PaymentTokenizationResponse> DeletePaymentTokenWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = null, string authorization = null, string region = null, string storeId = null);
        /// <summary>
        /// Get payment card details associated with token.
        /// </summary>
        /// <remarks>
        /// Get payment card details associated with token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>PaymentTokenizationResponse</returns>
        PaymentTokenizationResponse GetPaymentTokenDetails (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = null, string authorization = null, string region = null, string storeId = null);

        /// <summary>
        /// Get payment card details associated with token.
        /// </summary>
        /// <remarks>
        /// Get payment card details associated with token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>ApiResponse of PaymentTokenizationResponse</returns>
        ApiResponse<PaymentTokenizationResponse> GetPaymentTokenDetailsWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = null, string authorization = null, string region = null, string storeId = null);
        /// <summary>
        /// Update one or more payment tokens.
        /// </summary>
        /// <remarks>
        /// Use this update one or more payment tokens.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentCardPaymentTokenUpdateRequest">Accepted request type: PaymentCardPaymentTokenUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>PaymentTokenUpdateResponse</returns>
        PaymentTokenUpdateResponse UpdatePaymentToken (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentCardPaymentTokenUpdateRequest paymentCardPaymentTokenUpdateRequest, string messageSignature = null, string authorization = null, string region = null);

        /// <summary>
        /// Update one or more payment tokens.
        /// </summary>
        /// <remarks>
        /// Use this update one or more payment tokens.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentCardPaymentTokenUpdateRequest">Accepted request type: PaymentCardPaymentTokenUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>ApiResponse of PaymentTokenUpdateResponse</returns>
        ApiResponse<PaymentTokenUpdateResponse> UpdatePaymentTokenWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentCardPaymentTokenUpdateRequest paymentCardPaymentTokenUpdateRequest, string messageSignature = null, string authorization = null, string region = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentTokenApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a payment token from a payment card.
        /// </summary>
        /// <remarks>
        /// Use this to create a payment token from a payment card.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentTokenizationRequest">Accepted request types: PaymentCardPaymentTokenizationRequest, PaymentDevicePaymentTokenizationRequest, and ReferencedOrderPaymentTokenizationRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of PaymentTokenizationResponse</returns>
        System.Threading.Tasks.Task<PaymentTokenizationResponse> CreatePaymentTokenAsync (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentTokenizationRequest paymentTokenizationRequest, string messageSignature = null, string authorization = null, string region = null);

        /// <summary>
        /// Create a payment token from a payment card.
        /// </summary>
        /// <remarks>
        /// Use this to create a payment token from a payment card.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentTokenizationRequest">Accepted request types: PaymentCardPaymentTokenizationRequest, PaymentDevicePaymentTokenizationRequest, and ReferencedOrderPaymentTokenizationRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentTokenizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentTokenizationResponse>> CreatePaymentTokenAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentTokenizationRequest paymentTokenizationRequest, string messageSignature = null, string authorization = null, string region = null);
        /// <summary>
        /// Delete a payment token.
        /// </summary>
        /// <remarks>
        /// Use this to delete a payment token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>Task of PaymentTokenizationResponse</returns>
        System.Threading.Tasks.Task<PaymentTokenizationResponse> DeletePaymentTokenAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = null, string authorization = null, string region = null, string storeId = null);

        /// <summary>
        /// Delete a payment token.
        /// </summary>
        /// <remarks>
        /// Use this to delete a payment token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>Task of ApiResponse (PaymentTokenizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentTokenizationResponse>> DeletePaymentTokenAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = null, string authorization = null, string region = null, string storeId = null);
        /// <summary>
        /// Get payment card details associated with token.
        /// </summary>
        /// <remarks>
        /// Get payment card details associated with token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>Task of PaymentTokenizationResponse</returns>
        System.Threading.Tasks.Task<PaymentTokenizationResponse> GetPaymentTokenDetailsAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = null, string authorization = null, string region = null, string storeId = null);

        /// <summary>
        /// Get payment card details associated with token.
        /// </summary>
        /// <remarks>
        /// Get payment card details associated with token.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>Task of ApiResponse (PaymentTokenizationResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentTokenizationResponse>> GetPaymentTokenDetailsAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = null, string authorization = null, string region = null, string storeId = null);
        /// <summary>
        /// Update one or more payment tokens.
        /// </summary>
        /// <remarks>
        /// Use this update one or more payment tokens.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentCardPaymentTokenUpdateRequest">Accepted request type: PaymentCardPaymentTokenUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of PaymentTokenUpdateResponse</returns>
        System.Threading.Tasks.Task<PaymentTokenUpdateResponse> UpdatePaymentTokenAsync (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentCardPaymentTokenUpdateRequest paymentCardPaymentTokenUpdateRequest, string messageSignature = null, string authorization = null, string region = null);

        /// <summary>
        /// Update one or more payment tokens.
        /// </summary>
        /// <remarks>
        /// Use this update one or more payment tokens.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentCardPaymentTokenUpdateRequest">Accepted request type: PaymentCardPaymentTokenUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentTokenUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaymentTokenUpdateResponse>> UpdatePaymentTokenAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentCardPaymentTokenUpdateRequest paymentCardPaymentTokenUpdateRequest, string messageSignature = null, string authorization = null, string region = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPaymentTokenApi : IPaymentTokenApiSync, IPaymentTokenApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PaymentTokenApi : IPaymentTokenApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentTokenApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentTokenApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentTokenApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentTokenApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentTokenApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentTokenApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentTokenApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PaymentTokenApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a payment token from a payment card. Use this to create a payment token from a payment card.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentTokenizationRequest">Accepted request types: PaymentCardPaymentTokenizationRequest, PaymentDevicePaymentTokenizationRequest, and ReferencedOrderPaymentTokenizationRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>PaymentTokenizationResponse</returns>
        public PaymentTokenizationResponse CreatePaymentToken (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentTokenizationRequest paymentTokenizationRequest, string messageSignature = null, string authorization = null, string region = null)
        {
             Org.OpenAPITools.Client.ApiResponse<PaymentTokenizationResponse> localVarResponse = CreatePaymentTokenWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, paymentTokenizationRequest, messageSignature, authorization, region);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a payment token from a payment card. Use this to create a payment token from a payment card.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentTokenizationRequest">Accepted request types: PaymentCardPaymentTokenizationRequest, PaymentDevicePaymentTokenizationRequest, and ReferencedOrderPaymentTokenizationRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>ApiResponse of PaymentTokenizationResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< PaymentTokenizationResponse > CreatePaymentTokenWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentTokenizationRequest paymentTokenizationRequest, string messageSignature = null, string authorization = null, string region = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling PaymentTokenApi->CreatePaymentToken");

            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentTokenApi->CreatePaymentToken");

            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiKey' when calling PaymentTokenApi->CreatePaymentToken");

            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'timestamp' when calling PaymentTokenApi->CreatePaymentToken");

            // verify the required parameter 'paymentTokenizationRequest' is set
            if (paymentTokenizationRequest == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentTokenizationRequest' when calling PaymentTokenApi->CreatePaymentToken");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (contentType != null)
                requestOptions.HeaderParameters.Add("Content-Type", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null)
                requestOptions.HeaderParameters.Add("Client-Request-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null)
                requestOptions.HeaderParameters.Add("Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiKey)); // header parameter
            if (timestamp != null)
                requestOptions.HeaderParameters.Add("Timestamp", Org.OpenAPITools.Client.ClientUtils.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null)
                requestOptions.HeaderParameters.Add("Message-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(messageSignature)); // header parameter
            if (authorization != null)
                requestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            if (region != null)
                requestOptions.HeaderParameters.Add("Region", Org.OpenAPITools.Client.ClientUtils.ParameterToString(region)); // header parameter
            requestOptions.Data = paymentTokenizationRequest;


            // make the HTTP request

            var response = this.Client.Post< PaymentTokenizationResponse >("/payment-tokens", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePaymentToken", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a payment token from a payment card. Use this to create a payment token from a payment card.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentTokenizationRequest">Accepted request types: PaymentCardPaymentTokenizationRequest, PaymentDevicePaymentTokenizationRequest, and ReferencedOrderPaymentTokenizationRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of PaymentTokenizationResponse</returns>
        public async System.Threading.Tasks.Task<PaymentTokenizationResponse> CreatePaymentTokenAsync (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentTokenizationRequest paymentTokenizationRequest, string messageSignature = null, string authorization = null, string region = null)
        {
             Org.OpenAPITools.Client.ApiResponse<PaymentTokenizationResponse> localVarResponse = await CreatePaymentTokenAsyncWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, paymentTokenizationRequest, messageSignature, authorization, region);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a payment token from a payment card. Use this to create a payment token from a payment card.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentTokenizationRequest">Accepted request types: PaymentCardPaymentTokenizationRequest, PaymentDevicePaymentTokenizationRequest, and ReferencedOrderPaymentTokenizationRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentTokenizationResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentTokenizationResponse>> CreatePaymentTokenAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentTokenizationRequest paymentTokenizationRequest, string messageSignature = null, string authorization = null, string region = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling PaymentTokenApi->CreatePaymentToken");

            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentTokenApi->CreatePaymentToken");

            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiKey' when calling PaymentTokenApi->CreatePaymentToken");

            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'timestamp' when calling PaymentTokenApi->CreatePaymentToken");

            // verify the required parameter 'paymentTokenizationRequest' is set
            if (paymentTokenizationRequest == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentTokenizationRequest' when calling PaymentTokenApi->CreatePaymentToken");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contentType != null)
                requestOptions.HeaderParameters.Add("Content-Type", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null)
                requestOptions.HeaderParameters.Add("Client-Request-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null)
                requestOptions.HeaderParameters.Add("Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiKey)); // header parameter
            if (timestamp != null)
                requestOptions.HeaderParameters.Add("Timestamp", Org.OpenAPITools.Client.ClientUtils.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null)
                requestOptions.HeaderParameters.Add("Message-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(messageSignature)); // header parameter
            if (authorization != null)
                requestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            if (region != null)
                requestOptions.HeaderParameters.Add("Region", Org.OpenAPITools.Client.ClientUtils.ParameterToString(region)); // header parameter
            requestOptions.Data = paymentTokenizationRequest;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<PaymentTokenizationResponse>("/payment-tokens", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CreatePaymentToken", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete a payment token. Use this to delete a payment token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>PaymentTokenizationResponse</returns>
        public PaymentTokenizationResponse DeletePaymentToken (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = null, string authorization = null, string region = null, string storeId = null)
        {
             Org.OpenAPITools.Client.ApiResponse<PaymentTokenizationResponse> localVarResponse = DeletePaymentTokenWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, tokenId, messageSignature, authorization, region, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a payment token. Use this to delete a payment token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>ApiResponse of PaymentTokenizationResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< PaymentTokenizationResponse > DeletePaymentTokenWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = null, string authorization = null, string region = null, string storeId = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling PaymentTokenApi->DeletePaymentToken");

            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentTokenApi->DeletePaymentToken");

            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiKey' when calling PaymentTokenApi->DeletePaymentToken");

            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'timestamp' when calling PaymentTokenApi->DeletePaymentToken");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'tokenId' when calling PaymentTokenApi->DeletePaymentToken");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tokenId != null)
                requestOptions.PathParameters.Add("token-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (storeId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (contentType != null)
                requestOptions.HeaderParameters.Add("Content-Type", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null)
                requestOptions.HeaderParameters.Add("Client-Request-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null)
                requestOptions.HeaderParameters.Add("Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiKey)); // header parameter
            if (timestamp != null)
                requestOptions.HeaderParameters.Add("Timestamp", Org.OpenAPITools.Client.ClientUtils.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null)
                requestOptions.HeaderParameters.Add("Message-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(messageSignature)); // header parameter
            if (authorization != null)
                requestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            if (region != null)
                requestOptions.HeaderParameters.Add("Region", Org.OpenAPITools.Client.ClientUtils.ParameterToString(region)); // header parameter


            // make the HTTP request

            var response = this.Client.Delete< PaymentTokenizationResponse >("/payment-tokens/{token-id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeletePaymentToken", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete a payment token. Use this to delete a payment token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>Task of PaymentTokenizationResponse</returns>
        public async System.Threading.Tasks.Task<PaymentTokenizationResponse> DeletePaymentTokenAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = null, string authorization = null, string region = null, string storeId = null)
        {
             Org.OpenAPITools.Client.ApiResponse<PaymentTokenizationResponse> localVarResponse = await DeletePaymentTokenAsyncWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, tokenId, messageSignature, authorization, region, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a payment token. Use this to delete a payment token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>Task of ApiResponse (PaymentTokenizationResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentTokenizationResponse>> DeletePaymentTokenAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = null, string authorization = null, string region = null, string storeId = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling PaymentTokenApi->DeletePaymentToken");

            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentTokenApi->DeletePaymentToken");

            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiKey' when calling PaymentTokenApi->DeletePaymentToken");

            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'timestamp' when calling PaymentTokenApi->DeletePaymentToken");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'tokenId' when calling PaymentTokenApi->DeletePaymentToken");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (tokenId != null)
                requestOptions.PathParameters.Add("token-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (storeId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (contentType != null)
                requestOptions.HeaderParameters.Add("Content-Type", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null)
                requestOptions.HeaderParameters.Add("Client-Request-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null)
                requestOptions.HeaderParameters.Add("Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiKey)); // header parameter
            if (timestamp != null)
                requestOptions.HeaderParameters.Add("Timestamp", Org.OpenAPITools.Client.ClientUtils.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null)
                requestOptions.HeaderParameters.Add("Message-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(messageSignature)); // header parameter
            if (authorization != null)
                requestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            if (region != null)
                requestOptions.HeaderParameters.Add("Region", Org.OpenAPITools.Client.ClientUtils.ParameterToString(region)); // header parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<PaymentTokenizationResponse>("/payment-tokens/{token-id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("DeletePaymentToken", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get payment card details associated with token. Get payment card details associated with token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>PaymentTokenizationResponse</returns>
        public PaymentTokenizationResponse GetPaymentTokenDetails (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = null, string authorization = null, string region = null, string storeId = null)
        {
             Org.OpenAPITools.Client.ApiResponse<PaymentTokenizationResponse> localVarResponse = GetPaymentTokenDetailsWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, tokenId, messageSignature, authorization, region, storeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get payment card details associated with token. Get payment card details associated with token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>ApiResponse of PaymentTokenizationResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< PaymentTokenizationResponse > GetPaymentTokenDetailsWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = null, string authorization = null, string region = null, string storeId = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling PaymentTokenApi->GetPaymentTokenDetails");

            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentTokenApi->GetPaymentTokenDetails");

            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiKey' when calling PaymentTokenApi->GetPaymentTokenDetails");

            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'timestamp' when calling PaymentTokenApi->GetPaymentTokenDetails");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'tokenId' when calling PaymentTokenApi->GetPaymentTokenDetails");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tokenId != null)
                requestOptions.PathParameters.Add("token-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (storeId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (contentType != null)
                requestOptions.HeaderParameters.Add("Content-Type", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null)
                requestOptions.HeaderParameters.Add("Client-Request-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null)
                requestOptions.HeaderParameters.Add("Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiKey)); // header parameter
            if (timestamp != null)
                requestOptions.HeaderParameters.Add("Timestamp", Org.OpenAPITools.Client.ClientUtils.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null)
                requestOptions.HeaderParameters.Add("Message-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(messageSignature)); // header parameter
            if (authorization != null)
                requestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            if (region != null)
                requestOptions.HeaderParameters.Add("Region", Org.OpenAPITools.Client.ClientUtils.ParameterToString(region)); // header parameter


            // make the HTTP request

            var response = this.Client.Get< PaymentTokenizationResponse >("/payment-tokens/{token-id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPaymentTokenDetails", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get payment card details associated with token. Get payment card details associated with token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>Task of PaymentTokenizationResponse</returns>
        public async System.Threading.Tasks.Task<PaymentTokenizationResponse> GetPaymentTokenDetailsAsync (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = null, string authorization = null, string region = null, string storeId = null)
        {
             Org.OpenAPITools.Client.ApiResponse<PaymentTokenizationResponse> localVarResponse = await GetPaymentTokenDetailsAsyncWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, tokenId, messageSignature, authorization, region, storeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get payment card details associated with token. Get payment card details associated with token.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="tokenId">Identifies a payment token.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <param name="storeId"> (optional)</param>
        /// <returns>Task of ApiResponse (PaymentTokenizationResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentTokenizationResponse>> GetPaymentTokenDetailsAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, string tokenId, string messageSignature = null, string authorization = null, string region = null, string storeId = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling PaymentTokenApi->GetPaymentTokenDetails");

            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentTokenApi->GetPaymentTokenDetails");

            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiKey' when calling PaymentTokenApi->GetPaymentTokenDetails");

            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'timestamp' when calling PaymentTokenApi->GetPaymentTokenDetails");

            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'tokenId' when calling PaymentTokenApi->GetPaymentTokenDetails");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (tokenId != null)
                requestOptions.PathParameters.Add("token-id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(tokenId)); // path parameter
            if (storeId != null)
            {
                foreach (var kvp in Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "storeId", storeId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (contentType != null)
                requestOptions.HeaderParameters.Add("Content-Type", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null)
                requestOptions.HeaderParameters.Add("Client-Request-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null)
                requestOptions.HeaderParameters.Add("Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiKey)); // header parameter
            if (timestamp != null)
                requestOptions.HeaderParameters.Add("Timestamp", Org.OpenAPITools.Client.ClientUtils.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null)
                requestOptions.HeaderParameters.Add("Message-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(messageSignature)); // header parameter
            if (authorization != null)
                requestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            if (region != null)
                requestOptions.HeaderParameters.Add("Region", Org.OpenAPITools.Client.ClientUtils.ParameterToString(region)); // header parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<PaymentTokenizationResponse>("/payment-tokens/{token-id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GetPaymentTokenDetails", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update one or more payment tokens. Use this update one or more payment tokens.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentCardPaymentTokenUpdateRequest">Accepted request type: PaymentCardPaymentTokenUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>PaymentTokenUpdateResponse</returns>
        public PaymentTokenUpdateResponse UpdatePaymentToken (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentCardPaymentTokenUpdateRequest paymentCardPaymentTokenUpdateRequest, string messageSignature = null, string authorization = null, string region = null)
        {
             Org.OpenAPITools.Client.ApiResponse<PaymentTokenUpdateResponse> localVarResponse = UpdatePaymentTokenWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, paymentCardPaymentTokenUpdateRequest, messageSignature, authorization, region);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update one or more payment tokens. Use this update one or more payment tokens.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentCardPaymentTokenUpdateRequest">Accepted request type: PaymentCardPaymentTokenUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>ApiResponse of PaymentTokenUpdateResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse< PaymentTokenUpdateResponse > UpdatePaymentTokenWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentCardPaymentTokenUpdateRequest paymentCardPaymentTokenUpdateRequest, string messageSignature = null, string authorization = null, string region = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling PaymentTokenApi->UpdatePaymentToken");

            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentTokenApi->UpdatePaymentToken");

            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiKey' when calling PaymentTokenApi->UpdatePaymentToken");

            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'timestamp' when calling PaymentTokenApi->UpdatePaymentToken");

            // verify the required parameter 'paymentCardPaymentTokenUpdateRequest' is set
            if (paymentCardPaymentTokenUpdateRequest == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentCardPaymentTokenUpdateRequest' when calling PaymentTokenApi->UpdatePaymentToken");

            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (contentType != null)
                requestOptions.HeaderParameters.Add("Content-Type", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null)
                requestOptions.HeaderParameters.Add("Client-Request-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null)
                requestOptions.HeaderParameters.Add("Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiKey)); // header parameter
            if (timestamp != null)
                requestOptions.HeaderParameters.Add("Timestamp", Org.OpenAPITools.Client.ClientUtils.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null)
                requestOptions.HeaderParameters.Add("Message-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(messageSignature)); // header parameter
            if (authorization != null)
                requestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            if (region != null)
                requestOptions.HeaderParameters.Add("Region", Org.OpenAPITools.Client.ClientUtils.ParameterToString(region)); // header parameter
            requestOptions.Data = paymentCardPaymentTokenUpdateRequest;


            // make the HTTP request

            var response = this.Client.Patch< PaymentTokenUpdateResponse >("/payment-tokens", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdatePaymentToken", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update one or more payment tokens. Use this update one or more payment tokens.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentCardPaymentTokenUpdateRequest">Accepted request type: PaymentCardPaymentTokenUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of PaymentTokenUpdateResponse</returns>
        public async System.Threading.Tasks.Task<PaymentTokenUpdateResponse> UpdatePaymentTokenAsync (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentCardPaymentTokenUpdateRequest paymentCardPaymentTokenUpdateRequest, string messageSignature = null, string authorization = null, string region = null)
        {
             Org.OpenAPITools.Client.ApiResponse<PaymentTokenUpdateResponse> localVarResponse = await UpdatePaymentTokenAsyncWithHttpInfo(contentType, clientRequestId, apiKey, timestamp, paymentCardPaymentTokenUpdateRequest, messageSignature, authorization, region);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update one or more payment tokens. Use this update one or more payment tokens.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Content type.</param>
        /// <param name="clientRequestId">A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.</param>
        /// <param name="apiKey">Key given to merchant after boarding associating their requests with the appropriate app in Apigee.</param>
        /// <param name="timestamp">Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).</param>
        /// <param name="paymentCardPaymentTokenUpdateRequest">Accepted request type: PaymentCardPaymentTokenUpdateRequest.</param>
        /// <param name="messageSignature">Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256 algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal. (optional)</param>
        /// <param name="authorization">The access token previously generated with the access-tokens call. Use the format &#39;Bearer {access-token}&#39;. (optional)</param>
        /// <param name="region">Indicates the region where the client wants the transaction to be processed. This will override the default processing region identified for the client. Available options are argentina, brazil, germany, india and northamerica. Region specific store setup and APIGEE boarding is required in order to use an alternate region for processing. (optional)</param>
        /// <returns>Task of ApiResponse (PaymentTokenUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PaymentTokenUpdateResponse>> UpdatePaymentTokenAsyncWithHttpInfo (string contentType, string clientRequestId, string apiKey, long timestamp, PaymentCardPaymentTokenUpdateRequest paymentCardPaymentTokenUpdateRequest, string messageSignature = null, string authorization = null, string region = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'contentType' when calling PaymentTokenApi->UpdatePaymentToken");

            // verify the required parameter 'clientRequestId' is set
            if (clientRequestId == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'clientRequestId' when calling PaymentTokenApi->UpdatePaymentToken");

            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'apiKey' when calling PaymentTokenApi->UpdatePaymentToken");

            // verify the required parameter 'timestamp' is set
            if (timestamp == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'timestamp' when calling PaymentTokenApi->UpdatePaymentToken");

            // verify the required parameter 'paymentCardPaymentTokenUpdateRequest' is set
            if (paymentCardPaymentTokenUpdateRequest == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'paymentCardPaymentTokenUpdateRequest' when calling PaymentTokenApi->UpdatePaymentToken");


            Org.OpenAPITools.Client.RequestOptions requestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (contentType != null)
                requestOptions.HeaderParameters.Add("Content-Type", Org.OpenAPITools.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            if (clientRequestId != null)
                requestOptions.HeaderParameters.Add("Client-Request-Id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(clientRequestId)); // header parameter
            if (apiKey != null)
                requestOptions.HeaderParameters.Add("Api-Key", Org.OpenAPITools.Client.ClientUtils.ParameterToString(apiKey)); // header parameter
            if (timestamp != null)
                requestOptions.HeaderParameters.Add("Timestamp", Org.OpenAPITools.Client.ClientUtils.ParameterToString(timestamp)); // header parameter
            if (messageSignature != null)
                requestOptions.HeaderParameters.Add("Message-Signature", Org.OpenAPITools.Client.ClientUtils.ParameterToString(messageSignature)); // header parameter
            if (authorization != null)
                requestOptions.HeaderParameters.Add("Authorization", Org.OpenAPITools.Client.ClientUtils.ParameterToString(authorization)); // header parameter
            if (region != null)
                requestOptions.HeaderParameters.Add("Region", Org.OpenAPITools.Client.ClientUtils.ParameterToString(region)); // header parameter
            requestOptions.Data = paymentCardPaymentTokenUpdateRequest;


            // make the HTTP request

            var response = await this.AsynchronousClient.PatchAsync<PaymentTokenUpdateResponse>("/payment-tokens", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UpdatePaymentToken", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
