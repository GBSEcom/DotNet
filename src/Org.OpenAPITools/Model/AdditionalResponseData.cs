/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.4.0.20210824.002
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Additional Response Data.
    /// </summary>
    [DataContract(Name = "AdditionalResponseData")]
    public partial class AdditionalResponseData : IEquatable<AdditionalResponseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdditionalResponseData" /> class.
        /// </summary>
        /// <param name="issuingBankName">Issuing Bank Name..</param>
        /// <param name="countryOfIssuance">Country of Issuance..</param>
        /// <param name="cardProductID">Card Product ID..</param>
        /// <param name="detailedProductID">Detailed Product ID..</param>
        /// <param name="associationResponseCodeAdtl">Association Response Code..</param>
        /// <param name="cardBrand">Card Brand..</param>
        public AdditionalResponseData(string issuingBankName = default(string), string countryOfIssuance = default(string), string cardProductID = default(string), string detailedProductID = default(string), string associationResponseCodeAdtl = default(string), string cardBrand = default(string))
        {
            this.IssuingBankName = issuingBankName;
            this.CountryOfIssuance = countryOfIssuance;
            this.CardProductID = cardProductID;
            this.DetailedProductID = detailedProductID;
            this.AssociationResponseCodeAdtl = associationResponseCodeAdtl;
            this.CardBrand = cardBrand;
        }

        /// <summary>
        /// Issuing Bank Name.
        /// </summary>
        /// <value>Issuing Bank Name.</value>
        [DataMember(Name = "issuingBankName", EmitDefaultValue = false)]
        public string IssuingBankName { get; set; }

        /// <summary>
        /// Country of Issuance.
        /// </summary>
        /// <value>Country of Issuance.</value>
        [DataMember(Name = "countryOfIssuance", EmitDefaultValue = false)]
        public string CountryOfIssuance { get; set; }

        /// <summary>
        /// Card Product ID.
        /// </summary>
        /// <value>Card Product ID.</value>
        [DataMember(Name = "cardProductID", EmitDefaultValue = false)]
        public string CardProductID { get; set; }

        /// <summary>
        /// Detailed Product ID.
        /// </summary>
        /// <value>Detailed Product ID.</value>
        [DataMember(Name = "detailedProductID", EmitDefaultValue = false)]
        public string DetailedProductID { get; set; }

        /// <summary>
        /// Association Response Code.
        /// </summary>
        /// <value>Association Response Code.</value>
        [DataMember(Name = "associationResponseCodeAdtl", EmitDefaultValue = false)]
        public string AssociationResponseCodeAdtl { get; set; }

        /// <summary>
        /// Card Brand.
        /// </summary>
        /// <value>Card Brand.</value>
        [DataMember(Name = "cardBrand", EmitDefaultValue = false)]
        public string CardBrand { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdditionalResponseData {\n");
            sb.Append("  IssuingBankName: ").Append(IssuingBankName).Append("\n");
            sb.Append("  CountryOfIssuance: ").Append(CountryOfIssuance).Append("\n");
            sb.Append("  CardProductID: ").Append(CardProductID).Append("\n");
            sb.Append("  DetailedProductID: ").Append(DetailedProductID).Append("\n");
            sb.Append("  AssociationResponseCodeAdtl: ").Append(AssociationResponseCodeAdtl).Append("\n");
            sb.Append("  CardBrand: ").Append(CardBrand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdditionalResponseData);
        }

        /// <summary>
        /// Returns true if AdditionalResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of AdditionalResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdditionalResponseData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IssuingBankName == input.IssuingBankName ||
                    (this.IssuingBankName != null &&
                    this.IssuingBankName.Equals(input.IssuingBankName))
                ) && 
                (
                    this.CountryOfIssuance == input.CountryOfIssuance ||
                    (this.CountryOfIssuance != null &&
                    this.CountryOfIssuance.Equals(input.CountryOfIssuance))
                ) && 
                (
                    this.CardProductID == input.CardProductID ||
                    (this.CardProductID != null &&
                    this.CardProductID.Equals(input.CardProductID))
                ) && 
                (
                    this.DetailedProductID == input.DetailedProductID ||
                    (this.DetailedProductID != null &&
                    this.DetailedProductID.Equals(input.DetailedProductID))
                ) && 
                (
                    this.AssociationResponseCodeAdtl == input.AssociationResponseCodeAdtl ||
                    (this.AssociationResponseCodeAdtl != null &&
                    this.AssociationResponseCodeAdtl.Equals(input.AssociationResponseCodeAdtl))
                ) && 
                (
                    this.CardBrand == input.CardBrand ||
                    (this.CardBrand != null &&
                    this.CardBrand.Equals(input.CardBrand))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IssuingBankName != null)
                    hashCode = hashCode * 59 + this.IssuingBankName.GetHashCode();
                if (this.CountryOfIssuance != null)
                    hashCode = hashCode * 59 + this.CountryOfIssuance.GetHashCode();
                if (this.CardProductID != null)
                    hashCode = hashCode * 59 + this.CardProductID.GetHashCode();
                if (this.DetailedProductID != null)
                    hashCode = hashCode * 59 + this.DetailedProductID.GetHashCode();
                if (this.AssociationResponseCodeAdtl != null)
                    hashCode = hashCode * 59 + this.AssociationResponseCodeAdtl.GetHashCode();
                if (this.CardBrand != null)
                    hashCode = hashCode * 59 + this.CardBrand.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IssuingBankName (string) maxLength
            if(this.IssuingBankName != null && this.IssuingBankName.Length > 18)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IssuingBankName, length must be less than 18.", new [] { "IssuingBankName" });
            }

            // CountryOfIssuance (string) maxLength
            if(this.CountryOfIssuance != null && this.CountryOfIssuance.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryOfIssuance, length must be less than 3.", new [] { "CountryOfIssuance" });
            }

            // CardProductID (string) maxLength
            if(this.CardProductID != null && this.CardProductID.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardProductID, length must be less than 1.", new [] { "CardProductID" });
            }

            // DetailedProductID (string) maxLength
            if(this.DetailedProductID != null && this.DetailedProductID.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DetailedProductID, length must be less than 3.", new [] { "DetailedProductID" });
            }

            // AssociationResponseCodeAdtl (string) maxLength
            if(this.AssociationResponseCodeAdtl != null && this.AssociationResponseCodeAdtl.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AssociationResponseCodeAdtl, length must be less than 3.", new [] { "AssociationResponseCodeAdtl" });
            }

            // CardBrand (string) maxLength
            if(this.CardBrand != null && this.CardBrand.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardBrand, length must be less than 1.", new [] { "CardBrand" });
            }

            yield break;
        }
    }
}
