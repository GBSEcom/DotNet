/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.5.0.20211029.001
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Item details.
    /// </summary>
    [DataContract(Name = "BasketItem")]
    public partial class BasketItem : IEquatable<BasketItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BasketItem" /> class.
        /// </summary>
        /// <param name="id">A unique ID associated with the product..</param>
        /// <param name="description">A name or short description of the product..</param>
        /// <param name="subTotal">Subtotal amount..</param>
        /// <param name="valueAddedTax">Value added tax amount..</param>
        /// <param name="localTax">Local tax amount..</param>
        /// <param name="deliveryAmount">Delivery amount..</param>
        /// <param name="chargeTotal">Charge Total amount..</param>
        /// <param name="currency">The currency of the original transaction..</param>
        /// <param name="quantity">The unit in which the product is sold (e.g. litre, kilogram, etc). Leave empty if the product is sold as a complete unit..</param>
        /// <param name="category">Category of the product..</param>
        /// <param name="detailedCategory">Detailed Category of the product..</param>
        /// <param name="options">Option details.</param>
        public BasketItem(string id = default(string), string description = default(string), decimal subTotal = default(decimal), decimal valueAddedTax = default(decimal), decimal localTax = default(decimal), decimal deliveryAmount = default(decimal), decimal chargeTotal = default(decimal), string currency = default(string), long quantity = default(long), string category = default(string), string detailedCategory = default(string), List<Option> options = default(List<Option>))
        {
            this.Id = id;
            this.Description = description;
            this.SubTotal = subTotal;
            this.ValueAddedTax = valueAddedTax;
            this.LocalTax = localTax;
            this.DeliveryAmount = deliveryAmount;
            this.ChargeTotal = chargeTotal;
            this.Currency = currency;
            this.Quantity = quantity;
            this.Category = category;
            this.DetailedCategory = detailedCategory;
            this.Options = options;
        }

        /// <summary>
        /// A unique ID associated with the product.
        /// </summary>
        /// <value>A unique ID associated with the product.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// A name or short description of the product.
        /// </summary>
        /// <value>A name or short description of the product.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Subtotal amount.
        /// </summary>
        /// <value>Subtotal amount.</value>
        [DataMember(Name = "subTotal", EmitDefaultValue = false)]
        public decimal SubTotal { get; set; }

        /// <summary>
        /// Value added tax amount.
        /// </summary>
        /// <value>Value added tax amount.</value>
        [DataMember(Name = "valueAddedTax", EmitDefaultValue = false)]
        public decimal ValueAddedTax { get; set; }

        /// <summary>
        /// Local tax amount.
        /// </summary>
        /// <value>Local tax amount.</value>
        [DataMember(Name = "localTax", EmitDefaultValue = false)]
        public decimal LocalTax { get; set; }

        /// <summary>
        /// Delivery amount.
        /// </summary>
        /// <value>Delivery amount.</value>
        [DataMember(Name = "deliveryAmount", EmitDefaultValue = false)]
        public decimal DeliveryAmount { get; set; }

        /// <summary>
        /// Charge Total amount.
        /// </summary>
        /// <value>Charge Total amount.</value>
        [DataMember(Name = "chargeTotal", EmitDefaultValue = false)]
        public decimal ChargeTotal { get; set; }

        /// <summary>
        /// The currency of the original transaction.
        /// </summary>
        /// <value>The currency of the original transaction.</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// The unit in which the product is sold (e.g. litre, kilogram, etc). Leave empty if the product is sold as a complete unit.
        /// </summary>
        /// <value>The unit in which the product is sold (e.g. litre, kilogram, etc). Leave empty if the product is sold as a complete unit.</value>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public long Quantity { get; set; }

        /// <summary>
        /// Category of the product.
        /// </summary>
        /// <value>Category of the product.</value>
        [DataMember(Name = "category", EmitDefaultValue = false)]
        public string Category { get; set; }

        /// <summary>
        /// Detailed Category of the product.
        /// </summary>
        /// <value>Detailed Category of the product.</value>
        [DataMember(Name = "detailedCategory", EmitDefaultValue = false)]
        public string DetailedCategory { get; set; }

        /// <summary>
        /// Option details
        /// </summary>
        /// <value>Option details</value>
        [DataMember(Name = "options", EmitDefaultValue = false)]
        public List<Option> Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BasketItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  ValueAddedTax: ").Append(ValueAddedTax).Append("\n");
            sb.Append("  LocalTax: ").Append(LocalTax).Append("\n");
            sb.Append("  DeliveryAmount: ").Append(DeliveryAmount).Append("\n");
            sb.Append("  ChargeTotal: ").Append(ChargeTotal).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  DetailedCategory: ").Append(DetailedCategory).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BasketItem);
        }

        /// <summary>
        /// Returns true if BasketItem instances are equal
        /// </summary>
        /// <param name="input">Instance of BasketItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BasketItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.SubTotal == input.SubTotal ||
                    this.SubTotal.Equals(input.SubTotal)
                ) && 
                (
                    this.ValueAddedTax == input.ValueAddedTax ||
                    this.ValueAddedTax.Equals(input.ValueAddedTax)
                ) && 
                (
                    this.LocalTax == input.LocalTax ||
                    this.LocalTax.Equals(input.LocalTax)
                ) && 
                (
                    this.DeliveryAmount == input.DeliveryAmount ||
                    this.DeliveryAmount.Equals(input.DeliveryAmount)
                ) && 
                (
                    this.ChargeTotal == input.ChargeTotal ||
                    this.ChargeTotal.Equals(input.ChargeTotal)
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.DetailedCategory == input.DetailedCategory ||
                    (this.DetailedCategory != null &&
                    this.DetailedCategory.Equals(input.DetailedCategory))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    input.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                hashCode = hashCode * 59 + this.SubTotal.GetHashCode();
                hashCode = hashCode * 59 + this.ValueAddedTax.GetHashCode();
                hashCode = hashCode * 59 + this.LocalTax.GetHashCode();
                hashCode = hashCode * 59 + this.DeliveryAmount.GetHashCode();
                hashCode = hashCode * 59 + this.ChargeTotal.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.DetailedCategory != null)
                    hashCode = hashCode * 59 + this.DetailedCategory.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Currency (string) pattern
            Regex regexCurrency = new Regex(@"([A-Z]{3})|([0-9]{3})", RegexOptions.CultureInvariant);
            if (false == regexCurrency.Match(this.Currency).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, must match a pattern of " + regexCurrency, new [] { "Currency" });
            }

            yield break;
        }
    }
}
