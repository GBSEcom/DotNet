/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.4.0.20210824.002
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Additional data specific to the car rental industry.
    /// </summary>
    [DataContract(Name = "CarRental")]
    public partial class CarRental : IEquatable<CarRental>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CarRental" /> class.
        /// </summary>
        /// <param name="agreementNumber">The car rental agreement number..</param>
        /// <param name="renterName">The name of the person renting the car..</param>
        /// <param name="returnCity">The city where the rental ends and the car is returned..</param>
        /// <param name="returnDate">The date the car rental ends and the car is returned..</param>
        /// <param name="pickupDate">The date the car rental begins..</param>
        /// <param name="rentalClassId">The classification of the rental car..</param>
        /// <param name="extraCharges">Array containing information about charges other than the rental rate..</param>
        /// <param name="noShowIndicator">Indicates if the transaction is related to a no-show charge..</param>
        public CarRental(string agreementNumber = default(string), string renterName = default(string), string returnCity = default(string), DateTime returnDate = default(DateTime), DateTime pickupDate = default(DateTime), string rentalClassId = default(string), List<CarRentalExtraCharges> extraCharges = default(List<CarRentalExtraCharges>), bool noShowIndicator = default(bool))
        {
            this.AgreementNumber = agreementNumber;
            this.RenterName = renterName;
            this.ReturnCity = returnCity;
            this.ReturnDate = returnDate;
            this.PickupDate = pickupDate;
            this.RentalClassId = rentalClassId;
            this.ExtraCharges = extraCharges;
            this.NoShowIndicator = noShowIndicator;
        }

        /// <summary>
        /// The car rental agreement number.
        /// </summary>
        /// <value>The car rental agreement number.</value>
        [DataMember(Name = "agreementNumber", EmitDefaultValue = false)]
        public string AgreementNumber { get; set; }

        /// <summary>
        /// The name of the person renting the car.
        /// </summary>
        /// <value>The name of the person renting the car.</value>
        [DataMember(Name = "renterName", EmitDefaultValue = false)]
        public string RenterName { get; set; }

        /// <summary>
        /// The city where the rental ends and the car is returned.
        /// </summary>
        /// <value>The city where the rental ends and the car is returned.</value>
        [DataMember(Name = "returnCity", EmitDefaultValue = false)]
        public string ReturnCity { get; set; }

        /// <summary>
        /// The date the car rental ends and the car is returned.
        /// </summary>
        /// <value>The date the car rental ends and the car is returned.</value>
        [DataMember(Name = "returnDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ReturnDate { get; set; }

        /// <summary>
        /// The date the car rental begins.
        /// </summary>
        /// <value>The date the car rental begins.</value>
        [DataMember(Name = "pickupDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime PickupDate { get; set; }

        /// <summary>
        /// The classification of the rental car.
        /// </summary>
        /// <value>The classification of the rental car.</value>
        [DataMember(Name = "rentalClassId", EmitDefaultValue = false)]
        public string RentalClassId { get; set; }

        /// <summary>
        /// Array containing information about charges other than the rental rate.
        /// </summary>
        /// <value>Array containing information about charges other than the rental rate.</value>
        [DataMember(Name = "extraCharges", EmitDefaultValue = false)]
        public List<CarRentalExtraCharges> ExtraCharges { get; set; }

        /// <summary>
        /// Indicates if the transaction is related to a no-show charge.
        /// </summary>
        /// <value>Indicates if the transaction is related to a no-show charge.</value>
        [DataMember(Name = "noShowIndicator", EmitDefaultValue = true)]
        public bool? NoShowIndicator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CarRental {\n");
            sb.Append("  AgreementNumber: ").Append(AgreementNumber).Append("\n");
            sb.Append("  RenterName: ").Append(RenterName).Append("\n");
            sb.Append("  ReturnCity: ").Append(ReturnCity).Append("\n");
            sb.Append("  ReturnDate: ").Append(ReturnDate).Append("\n");
            sb.Append("  PickupDate: ").Append(PickupDate).Append("\n");
            sb.Append("  RentalClassId: ").Append(RentalClassId).Append("\n");
            sb.Append("  ExtraCharges: ").Append(ExtraCharges).Append("\n");
            sb.Append("  NoShowIndicator: ").Append(NoShowIndicator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CarRental);
        }

        /// <summary>
        /// Returns true if CarRental instances are equal
        /// </summary>
        /// <param name="input">Instance of CarRental to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CarRental input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AgreementNumber == input.AgreementNumber ||
                    (this.AgreementNumber != null &&
                    this.AgreementNumber.Equals(input.AgreementNumber))
                ) && 
                (
                    this.RenterName == input.RenterName ||
                    (this.RenterName != null &&
                    this.RenterName.Equals(input.RenterName))
                ) && 
                (
                    this.ReturnCity == input.ReturnCity ||
                    (this.ReturnCity != null &&
                    this.ReturnCity.Equals(input.ReturnCity))
                ) && 
                (
                    this.ReturnDate == input.ReturnDate ||
                    (this.ReturnDate != null &&
                    this.ReturnDate.Equals(input.ReturnDate))
                ) && 
                (
                    this.PickupDate == input.PickupDate ||
                    (this.PickupDate != null &&
                    this.PickupDate.Equals(input.PickupDate))
                ) && 
                (
                    this.RentalClassId == input.RentalClassId ||
                    (this.RentalClassId != null &&
                    this.RentalClassId.Equals(input.RentalClassId))
                ) && 
                (
                    this.ExtraCharges == input.ExtraCharges ||
                    this.ExtraCharges != null &&
                    input.ExtraCharges != null &&
                    this.ExtraCharges.SequenceEqual(input.ExtraCharges)
                ) && 
                (
                    this.NoShowIndicator == input.NoShowIndicator ||
                    this.NoShowIndicator.Equals(input.NoShowIndicator)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AgreementNumber != null)
                    hashCode = hashCode * 59 + this.AgreementNumber.GetHashCode();
                if (this.RenterName != null)
                    hashCode = hashCode * 59 + this.RenterName.GetHashCode();
                if (this.ReturnCity != null)
                    hashCode = hashCode * 59 + this.ReturnCity.GetHashCode();
                if (this.ReturnDate != null)
                    hashCode = hashCode * 59 + this.ReturnDate.GetHashCode();
                if (this.PickupDate != null)
                    hashCode = hashCode * 59 + this.PickupDate.GetHashCode();
                if (this.RentalClassId != null)
                    hashCode = hashCode * 59 + this.RentalClassId.GetHashCode();
                if (this.ExtraCharges != null)
                    hashCode = hashCode * 59 + this.ExtraCharges.GetHashCode();
                hashCode = hashCode * 59 + this.NoShowIndicator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AgreementNumber (string) maxLength
            if(this.AgreementNumber != null && this.AgreementNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AgreementNumber, length must be less than 20.", new [] { "AgreementNumber" });
            }

            // RenterName (string) maxLength
            if(this.RenterName != null && this.RenterName.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RenterName, length must be less than 20.", new [] { "RenterName" });
            }

            // ReturnCity (string) maxLength
            if(this.ReturnCity != null && this.ReturnCity.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReturnCity, length must be less than 20.", new [] { "ReturnCity" });
            }

            // RentalClassId (string) maxLength
            if(this.RentalClassId != null && this.RentalClassId.Length > 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RentalClassId, length must be less than 6.", new [] { "RentalClassId" });
            }

            yield break;
        }
    }
}
