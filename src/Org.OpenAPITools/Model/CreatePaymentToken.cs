/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.5.0.20211029.001
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Use this model to create a payment token.
    /// </summary>
    [DataContract(Name = "CreatePaymentToken")]
    public partial class CreatePaymentToken : IEquatable<CreatePaymentToken>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreatePaymentToken" /> class.
        /// </summary>
        /// <param name="value">Client-supplied payment token value. Only applicable for DataVault tokenization scheme..</param>
        /// <param name="reusable">If the token is reusable. (default to true).</param>
        /// <param name="declineDuplicates">Decline duplicate payment info if client token is supplied. (default to false).</param>
        public CreatePaymentToken(string value = default(string), bool reusable = true, bool declineDuplicates = false)
        {
            this.Value = value;
            this.Reusable = reusable;
            this.DeclineDuplicates = declineDuplicates;
        }

        /// <summary>
        /// Client-supplied payment token value. Only applicable for DataVault tokenization scheme.
        /// </summary>
        /// <value>Client-supplied payment token value. Only applicable for DataVault tokenization scheme.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// If the token is reusable.
        /// </summary>
        /// <value>If the token is reusable.</value>
        [DataMember(Name = "reusable", EmitDefaultValue = true)]
        public bool? Reusable { get; set; }

        /// <summary>
        /// Decline duplicate payment info if client token is supplied.
        /// </summary>
        /// <value>Decline duplicate payment info if client token is supplied.</value>
        [DataMember(Name = "declineDuplicates", EmitDefaultValue = true)]
        public bool? DeclineDuplicates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreatePaymentToken {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Reusable: ").Append(Reusable).Append("\n");
            sb.Append("  DeclineDuplicates: ").Append(DeclineDuplicates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreatePaymentToken);
        }

        /// <summary>
        /// Returns true if CreatePaymentToken instances are equal
        /// </summary>
        /// <param name="input">Instance of CreatePaymentToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatePaymentToken input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Reusable == input.Reusable ||
                    this.Reusable.Equals(input.Reusable)
                ) && 
                (
                    this.DeclineDuplicates == input.DeclineDuplicates ||
                    this.DeclineDuplicates.Equals(input.DeclineDuplicates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                hashCode = hashCode * 59 + this.Reusable.GetHashCode();
                hashCode = hashCode * 59 + this.DeclineDuplicates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
