/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.4.0.20210824.002
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Currency conversion. Abstract class, do not use this class directly, use one of its children: Dcc, DynamicPricing.
    /// </summary>
    [DataContract(Name = "CurrencyConversion")]
    [JsonConverter(typeof(JsonSubtypes), "ConversionType")]
    [JsonSubtypes.KnownSubType(typeof(Dcc), "Dcc")]
    [JsonSubtypes.KnownSubType(typeof(DynamicPricing), "DynamicPricing")]
    public partial class CurrencyConversion : IEquatable<CurrencyConversion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyConversion" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CurrencyConversion() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrencyConversion" /> class.
        /// </summary>
        /// <param name="conversionType">Type of currency conversion. (required).</param>
        /// <param name="inquiryRateId">Inquiry rate id. (required).</param>
        public CurrencyConversion(string conversionType = default(string), string inquiryRateId = default(string))
        {
            // to ensure "conversionType" is required (not null)
            this.ConversionType = conversionType ?? throw new ArgumentNullException("conversionType is a required property for CurrencyConversion and cannot be null");
            // to ensure "inquiryRateId" is required (not null)
            this.InquiryRateId = inquiryRateId ?? throw new ArgumentNullException("inquiryRateId is a required property for CurrencyConversion and cannot be null");
        }

        /// <summary>
        /// Type of currency conversion.
        /// </summary>
        /// <value>Type of currency conversion.</value>
        [DataMember(Name = "conversionType", IsRequired = true, EmitDefaultValue = false)]
        public string ConversionType { get; set; }

        /// <summary>
        /// Inquiry rate id.
        /// </summary>
        /// <value>Inquiry rate id.</value>
        [DataMember(Name = "inquiryRateId", IsRequired = true, EmitDefaultValue = false)]
        public string InquiryRateId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CurrencyConversion {\n");
            sb.Append("  ConversionType: ").Append(ConversionType).Append("\n");
            sb.Append("  InquiryRateId: ").Append(InquiryRateId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrencyConversion);
        }

        /// <summary>
        /// Returns true if CurrencyConversion instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrencyConversion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrencyConversion input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConversionType == input.ConversionType ||
                    (this.ConversionType != null &&
                    this.ConversionType.Equals(input.ConversionType))
                ) && 
                (
                    this.InquiryRateId == input.InquiryRateId ||
                    (this.InquiryRateId != null &&
                    this.InquiryRateId.Equals(input.InquiryRateId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConversionType != null)
                    hashCode = hashCode * 59 + this.ConversionType.GetHashCode();
                if (this.InquiryRateId != null)
                    hashCode = hashCode * 59 + this.InquiryRateId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // InquiryRateId (string) pattern
            Regex regexInquiryRateId = new Regex(@"^(?!\\s*$).+", RegexOptions.CultureInvariant);
            if (false == regexInquiryRateId.Match(this.InquiryRateId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InquiryRateId, must match a pattern of " + regexInquiryRateId, new [] { "InquiryRateId" });
            }

            yield break;
        }
    }
}
