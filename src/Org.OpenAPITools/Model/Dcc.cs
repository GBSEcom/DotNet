/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.3.0.20210608.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Request to perform a dynamic pricing exchange rate inquiry.
    /// </summary>
    [DataContract]
    public partial class Dcc : CurrencyConversion, IEquatable<Dcc>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Dcc" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Dcc() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Dcc" /> class.
        /// </summary>
        /// <param name="dccApplied">Indicates whether customer agrees with rate to be used. (required).</param>
        /// <param name="conversionType">Type of currency conversion. (required).</param>
        /// <param name="inquiryRateId">Inquiry rate id. (required).</param>
        public Dcc(bool dccApplied = default(bool), string conversionType = default(string), string inquiryRateId = default(string)) : base(conversionType, inquiryRateId)
        {
            // to ensure "dccApplied" is required (not null)
            this.DccApplied = dccApplied;
        }

        /// <summary>
        /// Indicates whether customer agrees with rate to be used.
        /// </summary>
        /// <value>Indicates whether customer agrees with rate to be used.</value>
        [DataMember(Name = "dccApplied", EmitDefaultValue = false)]
        public bool? DccApplied { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Dcc {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  DccApplied: ").Append(DccApplied).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Dcc);
        }

        /// <summary>
        /// Returns true if Dcc instances are equal
        /// </summary>
        /// <param name="input">Instance of Dcc to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Dcc input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.DccApplied == input.DccApplied ||
                    (this.DccApplied != null &&
                    this.DccApplied.Equals(input.DccApplied))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.DccApplied != null)
                    hashCode = hashCode * 59 + this.DccApplied.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
