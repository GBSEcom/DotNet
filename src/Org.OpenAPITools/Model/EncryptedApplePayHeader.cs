/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.5.0.20211029.001
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Additional version-dependent information used to decrypt and verify the payment.
    /// </summary>
    [DataContract(Name = "EncryptedApplePay_header")]
    public partial class EncryptedApplePayHeader : IEquatable<EncryptedApplePayHeader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EncryptedApplePayHeader" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EncryptedApplePayHeader() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EncryptedApplePayHeader" /> class.
        /// </summary>
        /// <param name="applicationDataHash">Merchant supplied information about the payment request. Contains Base64-encoded SHA256 hash of the applicationData property of the original PKPaymentRequest. Note - applicationData from PaymentData of PKPaymentToken Refer to Apple Pay documentation..</param>
        /// <param name="ephemeralPublicKey">Temporary key for generating shared secret from a device. (required).</param>
        /// <param name="publicKeyHash">Hash of the X.509 encoded public key bytes of the merchant’s certificate. (required).</param>
        /// <param name="transactionId">Transaction identifier, generated on the device. (required).</param>
        public EncryptedApplePayHeader(string applicationDataHash = default(string), string ephemeralPublicKey = default(string), string publicKeyHash = default(string), string transactionId = default(string))
        {
            // to ensure "ephemeralPublicKey" is required (not null)
            this.EphemeralPublicKey = ephemeralPublicKey ?? throw new ArgumentNullException("ephemeralPublicKey is a required property for EncryptedApplePayHeader and cannot be null");
            // to ensure "publicKeyHash" is required (not null)
            this.PublicKeyHash = publicKeyHash ?? throw new ArgumentNullException("publicKeyHash is a required property for EncryptedApplePayHeader and cannot be null");
            // to ensure "transactionId" is required (not null)
            this.TransactionId = transactionId ?? throw new ArgumentNullException("transactionId is a required property for EncryptedApplePayHeader and cannot be null");
            this.ApplicationDataHash = applicationDataHash;
        }

        /// <summary>
        /// Merchant supplied information about the payment request. Contains Base64-encoded SHA256 hash of the applicationData property of the original PKPaymentRequest. Note - applicationData from PaymentData of PKPaymentToken Refer to Apple Pay documentation.
        /// </summary>
        /// <value>Merchant supplied information about the payment request. Contains Base64-encoded SHA256 hash of the applicationData property of the original PKPaymentRequest. Note - applicationData from PaymentData of PKPaymentToken Refer to Apple Pay documentation.</value>
        [DataMember(Name = "applicationDataHash", EmitDefaultValue = false)]
        public string ApplicationDataHash { get; set; }

        /// <summary>
        /// Temporary key for generating shared secret from a device.
        /// </summary>
        /// <value>Temporary key for generating shared secret from a device.</value>
        [DataMember(Name = "ephemeralPublicKey", IsRequired = true, EmitDefaultValue = false)]
        public string EphemeralPublicKey { get; set; }

        /// <summary>
        /// Hash of the X.509 encoded public key bytes of the merchant’s certificate.
        /// </summary>
        /// <value>Hash of the X.509 encoded public key bytes of the merchant’s certificate.</value>
        [DataMember(Name = "publicKeyHash", IsRequired = true, EmitDefaultValue = false)]
        public string PublicKeyHash { get; set; }

        /// <summary>
        /// Transaction identifier, generated on the device.
        /// </summary>
        /// <value>Transaction identifier, generated on the device.</value>
        [DataMember(Name = "transactionId", IsRequired = true, EmitDefaultValue = false)]
        public string TransactionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EncryptedApplePayHeader {\n");
            sb.Append("  ApplicationDataHash: ").Append(ApplicationDataHash).Append("\n");
            sb.Append("  EphemeralPublicKey: ").Append(EphemeralPublicKey).Append("\n");
            sb.Append("  PublicKeyHash: ").Append(PublicKeyHash).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EncryptedApplePayHeader);
        }

        /// <summary>
        /// Returns true if EncryptedApplePayHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of EncryptedApplePayHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EncryptedApplePayHeader input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ApplicationDataHash == input.ApplicationDataHash ||
                    (this.ApplicationDataHash != null &&
                    this.ApplicationDataHash.Equals(input.ApplicationDataHash))
                ) && 
                (
                    this.EphemeralPublicKey == input.EphemeralPublicKey ||
                    (this.EphemeralPublicKey != null &&
                    this.EphemeralPublicKey.Equals(input.EphemeralPublicKey))
                ) && 
                (
                    this.PublicKeyHash == input.PublicKeyHash ||
                    (this.PublicKeyHash != null &&
                    this.PublicKeyHash.Equals(input.PublicKeyHash))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ApplicationDataHash != null)
                    hashCode = hashCode * 59 + this.ApplicationDataHash.GetHashCode();
                if (this.EphemeralPublicKey != null)
                    hashCode = hashCode * 59 + this.EphemeralPublicKey.GetHashCode();
                if (this.PublicKeyHash != null)
                    hashCode = hashCode * 59 + this.PublicKeyHash.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EphemeralPublicKey (string) pattern
            Regex regexEphemeralPublicKey = new Regex(@"^(?!\\s*$).+", RegexOptions.CultureInvariant);
            if (false == regexEphemeralPublicKey.Match(this.EphemeralPublicKey).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EphemeralPublicKey, must match a pattern of " + regexEphemeralPublicKey, new [] { "EphemeralPublicKey" });
            }

            // PublicKeyHash (string) pattern
            Regex regexPublicKeyHash = new Regex(@"^(?!\\s*$).+", RegexOptions.CultureInvariant);
            if (false == regexPublicKeyHash.Match(this.PublicKeyHash).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PublicKeyHash, must match a pattern of " + regexPublicKeyHash, new [] { "PublicKeyHash" });
            }

            // TransactionId (string) pattern
            Regex regexTransactionId = new Regex(@"^(?!\\s*$).+", RegexOptions.CultureInvariant);
            if (false == regexTransactionId.Match(this.TransactionId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TransactionId, must match a pattern of " + regexTransactionId, new [] { "TransactionId" });
            }

            yield break;
        }
    }
}
