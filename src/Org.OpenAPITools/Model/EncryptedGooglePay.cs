/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.5.0.20211029.001
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Encrypted Google Pay payload.
    /// </summary>
    [DataContract(Name = "EncryptedGooglePay")]
    public partial class EncryptedGooglePay : IEquatable<EncryptedGooglePay>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EncryptedGooglePay" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EncryptedGooglePay() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EncryptedGooglePay" /> class.
        /// </summary>
        /// <param name="data">data (required).</param>
        /// <param name="signature">Signature for verifying that the message comes from Google. The signature is created using ECDSA. (required).</param>
        /// <param name="version">Identifies under which encryption/signing scheme this message has been created. In this way, the protocol can evolve over time if needed. For Google Payments transactions, this should be set to ECv1. (required).</param>
        public EncryptedGooglePay(EncryptedGooglePayData data = default(EncryptedGooglePayData), string signature = default(string), string version = default(string))
        {
            // to ensure "data" is required (not null)
            this.Data = data ?? throw new ArgumentNullException("data is a required property for EncryptedGooglePay and cannot be null");
            // to ensure "signature" is required (not null)
            this.Signature = signature ?? throw new ArgumentNullException("signature is a required property for EncryptedGooglePay and cannot be null");
            // to ensure "version" is required (not null)
            this._Version = version ?? throw new ArgumentNullException("version is a required property for EncryptedGooglePay and cannot be null");
        }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", IsRequired = true, EmitDefaultValue = false)]
        public EncryptedGooglePayData Data { get; set; }

        /// <summary>
        /// Signature for verifying that the message comes from Google. The signature is created using ECDSA.
        /// </summary>
        /// <value>Signature for verifying that the message comes from Google. The signature is created using ECDSA.</value>
        [DataMember(Name = "signature", IsRequired = true, EmitDefaultValue = false)]
        public string Signature { get; set; }

        /// <summary>
        /// Identifies under which encryption/signing scheme this message has been created. In this way, the protocol can evolve over time if needed. For Google Payments transactions, this should be set to ECv1.
        /// </summary>
        /// <value>Identifies under which encryption/signing scheme this message has been created. In this way, the protocol can evolve over time if needed. For Google Payments transactions, this should be set to ECv1.</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = false)]
        public string _Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EncryptedGooglePay {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  _Version: ").Append(_Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EncryptedGooglePay);
        }

        /// <summary>
        /// Returns true if EncryptedGooglePay instances are equal
        /// </summary>
        /// <param name="input">Instance of EncryptedGooglePay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EncryptedGooglePay input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) && 
                (
                    this._Version == input._Version ||
                    (this._Version != null &&
                    this._Version.Equals(input._Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.Signature != null)
                    hashCode = hashCode * 59 + this.Signature.GetHashCode();
                if (this._Version != null)
                    hashCode = hashCode * 59 + this._Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Signature (string) pattern
            Regex regexSignature = new Regex(@"^(?!\\s*$).+", RegexOptions.CultureInvariant);
            if (false == regexSignature.Match(this.Signature).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Signature, must match a pattern of " + regexSignature, new [] { "Signature" });
            }

            // _Version (string) pattern
            Regex regex_Version = new Regex(@"^(?!\\s*$).+", RegexOptions.CultureInvariant);
            if (false == regex_Version.Match(this._Version).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for _Version, must match a pattern of " + regex_Version, new [] { "_Version" });
            }

            yield break;
        }
    }
}
