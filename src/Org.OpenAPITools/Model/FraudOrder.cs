/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.5.0.20211029.001
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The list of items included in the order.
    /// </summary>
    [DataContract(Name = "FraudOrder")]
    public partial class FraudOrder : IEquatable<FraudOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FraudOrder" /> class.
        /// </summary>
        /// <param name="shipToAddress">shipToAddress.</param>
        /// <param name="items">The list of items included in the order..</param>
        /// <param name="detailsUrl">The URL to the merchant&#39;s management system, for reporting and analysis..</param>
        /// <param name="userDefined">A JSON object that can carry any additional information about the order that might be helpful for fraud detection..</param>
        public FraudOrder(ShipToAddress shipToAddress = default(ShipToAddress), List<FraudOrderItems> items = default(List<FraudOrderItems>), string detailsUrl = default(string), Object userDefined = default(Object))
        {
            this.ShipToAddress = shipToAddress;
            this.Items = items;
            this.DetailsUrl = detailsUrl;
            this.UserDefined = userDefined;
        }

        /// <summary>
        /// Gets or Sets ShipToAddress
        /// </summary>
        [DataMember(Name = "shipToAddress", EmitDefaultValue = false)]
        public ShipToAddress ShipToAddress { get; set; }

        /// <summary>
        /// The list of items included in the order.
        /// </summary>
        /// <value>The list of items included in the order.</value>
        [DataMember(Name = "items", EmitDefaultValue = false)]
        public List<FraudOrderItems> Items { get; set; }

        /// <summary>
        /// The URL to the merchant&#39;s management system, for reporting and analysis.
        /// </summary>
        /// <value>The URL to the merchant&#39;s management system, for reporting and analysis.</value>
        [DataMember(Name = "detailsUrl", EmitDefaultValue = false)]
        public string DetailsUrl { get; set; }

        /// <summary>
        /// A JSON object that can carry any additional information about the order that might be helpful for fraud detection.
        /// </summary>
        /// <value>A JSON object that can carry any additional information about the order that might be helpful for fraud detection.</value>
        [DataMember(Name = "userDefined", EmitDefaultValue = false)]
        public Object UserDefined { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FraudOrder {\n");
            sb.Append("  ShipToAddress: ").Append(ShipToAddress).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  DetailsUrl: ").Append(DetailsUrl).Append("\n");
            sb.Append("  UserDefined: ").Append(UserDefined).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FraudOrder);
        }

        /// <summary>
        /// Returns true if FraudOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of FraudOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FraudOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShipToAddress == input.ShipToAddress ||
                    (this.ShipToAddress != null &&
                    this.ShipToAddress.Equals(input.ShipToAddress))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.DetailsUrl == input.DetailsUrl ||
                    (this.DetailsUrl != null &&
                    this.DetailsUrl.Equals(input.DetailsUrl))
                ) && 
                (
                    this.UserDefined == input.UserDefined ||
                    (this.UserDefined != null &&
                    this.UserDefined.Equals(input.UserDefined))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShipToAddress != null)
                    hashCode = hashCode * 59 + this.ShipToAddress.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.DetailsUrl != null)
                    hashCode = hashCode * 59 + this.DetailsUrl.GetHashCode();
                if (this.UserDefined != null)
                    hashCode = hashCode * 59 + this.UserDefined.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
