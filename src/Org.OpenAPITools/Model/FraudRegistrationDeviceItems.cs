/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.4.0.20210824.002
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Network information.
    /// </summary>
    [DataContract(Name = "FraudRegistrationDeviceItems")]
    public partial class FraudRegistrationDeviceItems : IEquatable<FraudRegistrationDeviceItems>, IValidatableObject
    {
        /// <summary>
        /// Defines the type of network associated with the device.
        /// </summary>
        /// <value>Defines the type of network associated with the device.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NetworkTypeEnum
        {
            /// <summary>
            /// Enum Mobile for value: network/mobile
            /// </summary>
            [EnumMember(Value = "network/mobile")]
            Mobile = 1,

            /// <summary>
            /// Enum Wifi for value: network/wifi
            /// </summary>
            [EnumMember(Value = "network/wifi")]
            Wifi = 2

        }


        /// <summary>
        /// Defines the type of network associated with the device.
        /// </summary>
        /// <value>Defines the type of network associated with the device.</value>
        [DataMember(Name = "networkType", IsRequired = true, EmitDefaultValue = false)]
        public NetworkTypeEnum NetworkType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FraudRegistrationDeviceItems" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FraudRegistrationDeviceItems() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FraudRegistrationDeviceItems" /> class.
        /// </summary>
        /// <param name="networkType">Defines the type of network associated with the device. (required).</param>
        /// <param name="ip">The IPv4 or IPv6 address of the device if the network assigned one..</param>
        /// <param name="mac">The MAC address of the device that is connected to the Wi-Fi network..</param>
        /// <param name="ssid">The Wi-Fi networks Service Set Identifier (SSID)..</param>
        /// <param name="bssid">The Wi-Fi networks Basic Service Set Identifier (BSSID)..</param>
        /// <param name="userDefined">A JSON object that can carry any additional information about the network that might be helpful for fraud detection..</param>
        public FraudRegistrationDeviceItems(NetworkTypeEnum networkType = default(NetworkTypeEnum), string ip = default(string), string mac = default(string), string ssid = default(string), string bssid = default(string), Object userDefined = default(Object))
        {
            this.NetworkType = networkType;
            this.Ip = ip;
            this.Mac = mac;
            this.Ssid = ssid;
            this.Bssid = bssid;
            this.UserDefined = userDefined;
        }

        /// <summary>
        /// The IPv4 or IPv6 address of the device if the network assigned one.
        /// </summary>
        /// <value>The IPv4 or IPv6 address of the device if the network assigned one.</value>
        [DataMember(Name = "ip", EmitDefaultValue = false)]
        public string Ip { get; set; }

        /// <summary>
        /// The MAC address of the device that is connected to the Wi-Fi network.
        /// </summary>
        /// <value>The MAC address of the device that is connected to the Wi-Fi network.</value>
        [DataMember(Name = "mac", EmitDefaultValue = false)]
        public string Mac { get; set; }

        /// <summary>
        /// The Wi-Fi networks Service Set Identifier (SSID).
        /// </summary>
        /// <value>The Wi-Fi networks Service Set Identifier (SSID).</value>
        [DataMember(Name = "ssid", EmitDefaultValue = false)]
        public string Ssid { get; set; }

        /// <summary>
        /// The Wi-Fi networks Basic Service Set Identifier (BSSID).
        /// </summary>
        /// <value>The Wi-Fi networks Basic Service Set Identifier (BSSID).</value>
        [DataMember(Name = "bssid", EmitDefaultValue = false)]
        public string Bssid { get; set; }

        /// <summary>
        /// A JSON object that can carry any additional information about the network that might be helpful for fraud detection.
        /// </summary>
        /// <value>A JSON object that can carry any additional information about the network that might be helpful for fraud detection.</value>
        [DataMember(Name = "userDefined", EmitDefaultValue = false)]
        public Object UserDefined { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FraudRegistrationDeviceItems {\n");
            sb.Append("  NetworkType: ").Append(NetworkType).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Mac: ").Append(Mac).Append("\n");
            sb.Append("  Ssid: ").Append(Ssid).Append("\n");
            sb.Append("  Bssid: ").Append(Bssid).Append("\n");
            sb.Append("  UserDefined: ").Append(UserDefined).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FraudRegistrationDeviceItems);
        }

        /// <summary>
        /// Returns true if FraudRegistrationDeviceItems instances are equal
        /// </summary>
        /// <param name="input">Instance of FraudRegistrationDeviceItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FraudRegistrationDeviceItems input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NetworkType == input.NetworkType ||
                    this.NetworkType.Equals(input.NetworkType)
                ) && 
                (
                    this.Ip == input.Ip ||
                    (this.Ip != null &&
                    this.Ip.Equals(input.Ip))
                ) && 
                (
                    this.Mac == input.Mac ||
                    (this.Mac != null &&
                    this.Mac.Equals(input.Mac))
                ) && 
                (
                    this.Ssid == input.Ssid ||
                    (this.Ssid != null &&
                    this.Ssid.Equals(input.Ssid))
                ) && 
                (
                    this.Bssid == input.Bssid ||
                    (this.Bssid != null &&
                    this.Bssid.Equals(input.Bssid))
                ) && 
                (
                    this.UserDefined == input.UserDefined ||
                    (this.UserDefined != null &&
                    this.UserDefined.Equals(input.UserDefined))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.NetworkType.GetHashCode();
                if (this.Ip != null)
                    hashCode = hashCode * 59 + this.Ip.GetHashCode();
                if (this.Mac != null)
                    hashCode = hashCode * 59 + this.Mac.GetHashCode();
                if (this.Ssid != null)
                    hashCode = hashCode * 59 + this.Ssid.GetHashCode();
                if (this.Bssid != null)
                    hashCode = hashCode * 59 + this.Bssid.GetHashCode();
                if (this.UserDefined != null)
                    hashCode = hashCode * 59 + this.UserDefined.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
