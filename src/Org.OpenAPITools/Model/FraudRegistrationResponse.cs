/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.3.0.20210608.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FraudRegistrationResponse
    /// </summary>
    [DataContract]
    public partial class FraudRegistrationResponse : IEquatable<FraudRegistrationResponse>, IValidatableObject
    {
        /// <summary>
        /// Status of the transaction. Valid values are &#39;Not Processed&#39; and &#39;Scored successfully&#39;
        /// </summary>
        /// <value>Status of the transaction. Valid values are &#39;Not Processed&#39; and &#39;Scored successfully&#39;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionStatusEnum
        {
            /// <summary>
            /// Enum ScoredSuccessfully for value: Scored Successfully
            /// </summary>
            [EnumMember(Value = "Scored Successfully")]
            ScoredSuccessfully = 1,

            /// <summary>
            /// Enum NotProcessed for value: Not Processed
            /// </summary>
            [EnumMember(Value = "Not Processed")]
            NotProcessed = 2

        }

        /// <summary>
        /// Status of the transaction. Valid values are &#39;Not Processed&#39; and &#39;Scored successfully&#39;
        /// </summary>
        /// <value>Status of the transaction. Valid values are &#39;Not Processed&#39; and &#39;Scored successfully&#39;</value>
        [DataMember(Name = "transactionStatus", EmitDefaultValue = false)]
        public TransactionStatusEnum? TransactionStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FraudRegistrationResponse" /> class.
        /// </summary>
        /// <param name="correlationId">The value used to track the transaction..</param>
        /// <param name="transactionStatus">Status of the transaction. Valid values are &#39;Not Processed&#39; and &#39;Scored successfully&#39;.</param>
        /// <param name="validationStatus">If status returned is \&quot;failure\&quot;, input validation errors occurred. Please refer to the \&quot;Errors Section\&quot; for more info. Valid values are &#39;success&#39; and &#39;failed&#39;..</param>
        /// <param name="transactionType">The transactionType provided in request..</param>
        /// <param name="fraudScore">fraudScore.</param>
        /// <param name="error">error.</param>
        public FraudRegistrationResponse(string correlationId = default(string), TransactionStatusEnum? transactionStatus = null, string validationStatus = default(string), string transactionType = default(string), FraudScore fraudScore = default(FraudScore), FraudRegistrationError error = default(FraudRegistrationError))
        {
            this.CorrelationId = correlationId;
            this.TransactionStatus = transactionStatus;
            this.ValidationStatus = validationStatus;
            this.TransactionType = transactionType;
            this.FraudScore = fraudScore;
            this.Error = error;
        }

        /// <summary>
        /// The value used to track the transaction.
        /// </summary>
        /// <value>The value used to track the transaction.</value>
        [DataMember(Name = "correlationId", EmitDefaultValue = false)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// If status returned is \&quot;failure\&quot;, input validation errors occurred. Please refer to the \&quot;Errors Section\&quot; for more info. Valid values are &#39;success&#39; and &#39;failed&#39;.
        /// </summary>
        /// <value>If status returned is \&quot;failure\&quot;, input validation errors occurred. Please refer to the \&quot;Errors Section\&quot; for more info. Valid values are &#39;success&#39; and &#39;failed&#39;.</value>
        [DataMember(Name = "validationStatus", EmitDefaultValue = false)]
        public string ValidationStatus { get; set; }

        /// <summary>
        /// The transactionType provided in request.
        /// </summary>
        /// <value>The transactionType provided in request.</value>
        [DataMember(Name = "transactionType", EmitDefaultValue = false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// Gets or Sets FraudScore
        /// </summary>
        [DataMember(Name = "fraudScore", EmitDefaultValue = false)]
        public FraudScore FraudScore { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name = "Error", EmitDefaultValue = false)]
        public FraudRegistrationError Error { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FraudRegistrationResponse {\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  TransactionStatus: ").Append(TransactionStatus).Append("\n");
            sb.Append("  ValidationStatus: ").Append(ValidationStatus).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  FraudScore: ").Append(FraudScore).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FraudRegistrationResponse);
        }

        /// <summary>
        /// Returns true if FraudRegistrationResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FraudRegistrationResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FraudRegistrationResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CorrelationId == input.CorrelationId ||
                    (this.CorrelationId != null &&
                    this.CorrelationId.Equals(input.CorrelationId))
                ) && 
                (
                    this.TransactionStatus == input.TransactionStatus ||
                    (this.TransactionStatus != null &&
                    this.TransactionStatus.Equals(input.TransactionStatus))
                ) && 
                (
                    this.ValidationStatus == input.ValidationStatus ||
                    (this.ValidationStatus != null &&
                    this.ValidationStatus.Equals(input.ValidationStatus))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) && 
                (
                    this.FraudScore == input.FraudScore ||
                    (this.FraudScore != null &&
                    this.FraudScore.Equals(input.FraudScore))
                ) && 
                (
                    this.Error == input.Error ||
                    (this.Error != null &&
                    this.Error.Equals(input.Error))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CorrelationId != null)
                    hashCode = hashCode * 59 + this.CorrelationId.GetHashCode();
                if (this.TransactionStatus != null)
                    hashCode = hashCode * 59 + this.TransactionStatus.GetHashCode();
                if (this.ValidationStatus != null)
                    hashCode = hashCode * 59 + this.ValidationStatus.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.FraudScore != null)
                    hashCode = hashCode * 59 + this.FraudScore.GetHashCode();
                if (this.Error != null)
                    hashCode = hashCode * 59 + this.Error.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
