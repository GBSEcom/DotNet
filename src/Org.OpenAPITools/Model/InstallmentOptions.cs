/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.4.0.20210824.002
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Indicates that the total sum payable is divided for payment at successive fixed times.
    /// </summary>
    [DataContract(Name = "InstallmentOptions")]
    public partial class InstallmentOptions : IEquatable<InstallmentOptions>, IValidatableObject
    {
        /// <summary>
        /// The type of recurring payment.
        /// </summary>
        /// <value>The type of recurring payment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RecurringTypeEnum
        {
            /// <summary>
            /// Enum FIRST for value: FIRST
            /// </summary>
            [EnumMember(Value = "FIRST")]
            FIRST = 1,

            /// <summary>
            /// Enum REPEAT for value: REPEAT
            /// </summary>
            [EnumMember(Value = "REPEAT")]
            REPEAT = 2,

            /// <summary>
            /// Enum STANDINGINSTRUCTION for value: STANDING_INSTRUCTION
            /// </summary>
            [EnumMember(Value = "STANDING_INSTRUCTION")]
            STANDINGINSTRUCTION = 3

        }


        /// <summary>
        /// The type of recurring payment.
        /// </summary>
        /// <value>The type of recurring payment.</value>
        [DataMember(Name = "recurringType", EmitDefaultValue = false)]
        public RecurringTypeEnum? RecurringType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InstallmentOptions" /> class.
        /// </summary>
        /// <param name="numberOfInstallments">Number of installments for a sale transaction if the customer pays the total amount in multiple transactions..</param>
        /// <param name="installmentsInterest">Indicates whether the installment interest amount has been applied..</param>
        /// <param name="installmentDelayMonths">The number of months the first installment payment will be delayed..</param>
        /// <param name="recurringType">The type of recurring payment..</param>
        /// <param name="merchantAdviceCodeSupported">Indicates if the merchant supports merchant advice code (MAC) in order to receive table 55 code for a declined recurring transaction..</param>
        public InstallmentOptions(int numberOfInstallments = default(int), bool installmentsInterest = default(bool), int installmentDelayMonths = default(int), RecurringTypeEnum? recurringType = default(RecurringTypeEnum?), bool merchantAdviceCodeSupported = default(bool))
        {
            this.NumberOfInstallments = numberOfInstallments;
            this.InstallmentsInterest = installmentsInterest;
            this.InstallmentDelayMonths = installmentDelayMonths;
            this.RecurringType = recurringType;
            this.MerchantAdviceCodeSupported = merchantAdviceCodeSupported;
        }

        /// <summary>
        /// Number of installments for a sale transaction if the customer pays the total amount in multiple transactions.
        /// </summary>
        /// <value>Number of installments for a sale transaction if the customer pays the total amount in multiple transactions.</value>
        [DataMember(Name = "numberOfInstallments", EmitDefaultValue = false)]
        public int NumberOfInstallments { get; set; }

        /// <summary>
        /// Indicates whether the installment interest amount has been applied.
        /// </summary>
        /// <value>Indicates whether the installment interest amount has been applied.</value>
        [DataMember(Name = "installmentsInterest", EmitDefaultValue = true)]
        public bool? InstallmentsInterest { get; set; }

        /// <summary>
        /// The number of months the first installment payment will be delayed.
        /// </summary>
        /// <value>The number of months the first installment payment will be delayed.</value>
        [DataMember(Name = "installmentDelayMonths", EmitDefaultValue = false)]
        public int InstallmentDelayMonths { get; set; }

        /// <summary>
        /// Indicates if the merchant supports merchant advice code (MAC) in order to receive table 55 code for a declined recurring transaction.
        /// </summary>
        /// <value>Indicates if the merchant supports merchant advice code (MAC) in order to receive table 55 code for a declined recurring transaction.</value>
        [DataMember(Name = "merchantAdviceCodeSupported", EmitDefaultValue = true)]
        public bool? MerchantAdviceCodeSupported { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstallmentOptions {\n");
            sb.Append("  NumberOfInstallments: ").Append(NumberOfInstallments).Append("\n");
            sb.Append("  InstallmentsInterest: ").Append(InstallmentsInterest).Append("\n");
            sb.Append("  InstallmentDelayMonths: ").Append(InstallmentDelayMonths).Append("\n");
            sb.Append("  RecurringType: ").Append(RecurringType).Append("\n");
            sb.Append("  MerchantAdviceCodeSupported: ").Append(MerchantAdviceCodeSupported).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InstallmentOptions);
        }

        /// <summary>
        /// Returns true if InstallmentOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of InstallmentOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstallmentOptions input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NumberOfInstallments == input.NumberOfInstallments ||
                    this.NumberOfInstallments.Equals(input.NumberOfInstallments)
                ) && 
                (
                    this.InstallmentsInterest == input.InstallmentsInterest ||
                    this.InstallmentsInterest.Equals(input.InstallmentsInterest)
                ) && 
                (
                    this.InstallmentDelayMonths == input.InstallmentDelayMonths ||
                    this.InstallmentDelayMonths.Equals(input.InstallmentDelayMonths)
                ) && 
                (
                    this.RecurringType == input.RecurringType ||
                    this.RecurringType.Equals(input.RecurringType)
                ) && 
                (
                    this.MerchantAdviceCodeSupported == input.MerchantAdviceCodeSupported ||
                    this.MerchantAdviceCodeSupported.Equals(input.MerchantAdviceCodeSupported)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.NumberOfInstallments.GetHashCode();
                hashCode = hashCode * 59 + this.InstallmentsInterest.GetHashCode();
                hashCode = hashCode * 59 + this.InstallmentDelayMonths.GetHashCode();
                hashCode = hashCode * 59 + this.RecurringType.GetHashCode();
                hashCode = hashCode * 59 + this.MerchantAdviceCodeSupported.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NumberOfInstallments (int) maximum
            if(this.NumberOfInstallments > (int)99)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberOfInstallments, must be a value less than or equal to 99.", new [] { "NumberOfInstallments" });
            }

            // NumberOfInstallments (int) minimum
            if(this.NumberOfInstallments < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberOfInstallments, must be a value greater than or equal to 1.", new [] { "NumberOfInstallments" });
            }

            // InstallmentDelayMonths (int) maximum
            if(this.InstallmentDelayMonths > (int)99)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstallmentDelayMonths, must be a value less than or equal to 99.", new [] { "InstallmentDelayMonths" });
            }

            // InstallmentDelayMonths (int) minimum
            if(this.InstallmentDelayMonths < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for InstallmentDelayMonths, must be a value greater than or equal to 1.", new [] { "InstallmentDelayMonths" });
            }

            yield break;
        }
    }
}
