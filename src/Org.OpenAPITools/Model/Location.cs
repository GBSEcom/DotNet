/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.3.0.20210608.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The specific location (e.g. store or station) where the transaction takes place.
    /// </summary>
    [DataContract]
    public partial class Location : IEquatable<Location>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Location" /> class.
        /// </summary>
        /// <param name="locationId">The unique ID of this location..</param>
        /// <param name="merchantAddress">merchantAddress.</param>
        /// <param name="hierarchy">Free-text field to describe a hierarchy the merchant would like to provide..</param>
        /// <param name="timezoneOffset">The timezone offset from UTC to the merchants timezone configuration, specified in the format +hh:mm..</param>
        /// <param name="userDefined">A JSON object that can carry any additional information about the location that might be helpful for fraud detection..</param>
        public Location(string locationId = default(string), FraudAddress merchantAddress = default(FraudAddress), string hierarchy = default(string), string timezoneOffset = default(string), Object userDefined = default(Object))
        {
            this.LocationId = locationId;
            this.MerchantAddress = merchantAddress;
            this.Hierarchy = hierarchy;
            this.TimezoneOffset = timezoneOffset;
            this.UserDefined = userDefined;
        }

        /// <summary>
        /// The unique ID of this location.
        /// </summary>
        /// <value>The unique ID of this location.</value>
        [DataMember(Name = "locationId", EmitDefaultValue = false)]
        public string LocationId { get; set; }

        /// <summary>
        /// Gets or Sets MerchantAddress
        /// </summary>
        [DataMember(Name = "merchantAddress", EmitDefaultValue = false)]
        public FraudAddress MerchantAddress { get; set; }

        /// <summary>
        /// Free-text field to describe a hierarchy the merchant would like to provide.
        /// </summary>
        /// <value>Free-text field to describe a hierarchy the merchant would like to provide.</value>
        [DataMember(Name = "hierarchy", EmitDefaultValue = false)]
        public string Hierarchy { get; set; }

        /// <summary>
        /// The timezone offset from UTC to the merchants timezone configuration, specified in the format +hh:mm.
        /// </summary>
        /// <value>The timezone offset from UTC to the merchants timezone configuration, specified in the format +hh:mm.</value>
        [DataMember(Name = "timezoneOffset", EmitDefaultValue = false)]
        public string TimezoneOffset { get; set; }

        /// <summary>
        /// A JSON object that can carry any additional information about the location that might be helpful for fraud detection.
        /// </summary>
        /// <value>A JSON object that can carry any additional information about the location that might be helpful for fraud detection.</value>
        [DataMember(Name = "userDefined", EmitDefaultValue = false)]
        public Object UserDefined { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Location {\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  MerchantAddress: ").Append(MerchantAddress).Append("\n");
            sb.Append("  Hierarchy: ").Append(Hierarchy).Append("\n");
            sb.Append("  TimezoneOffset: ").Append(TimezoneOffset).Append("\n");
            sb.Append("  UserDefined: ").Append(UserDefined).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Location);
        }

        /// <summary>
        /// Returns true if Location instances are equal
        /// </summary>
        /// <param name="input">Instance of Location to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Location input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.MerchantAddress == input.MerchantAddress ||
                    (this.MerchantAddress != null &&
                    this.MerchantAddress.Equals(input.MerchantAddress))
                ) && 
                (
                    this.Hierarchy == input.Hierarchy ||
                    (this.Hierarchy != null &&
                    this.Hierarchy.Equals(input.Hierarchy))
                ) && 
                (
                    this.TimezoneOffset == input.TimezoneOffset ||
                    (this.TimezoneOffset != null &&
                    this.TimezoneOffset.Equals(input.TimezoneOffset))
                ) && 
                (
                    this.UserDefined == input.UserDefined ||
                    (this.UserDefined != null &&
                    this.UserDefined.Equals(input.UserDefined))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LocationId != null)
                    hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                if (this.MerchantAddress != null)
                    hashCode = hashCode * 59 + this.MerchantAddress.GetHashCode();
                if (this.Hierarchy != null)
                    hashCode = hashCode * 59 + this.Hierarchy.GetHashCode();
                if (this.TimezoneOffset != null)
                    hashCode = hashCode * 59 + this.TimezoneOffset.GetHashCode();
                if (this.UserDefined != null)
                    hashCode = hashCode * 59 + this.UserDefined.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
