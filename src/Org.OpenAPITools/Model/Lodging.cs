/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.5.0.20211029.001
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Additional data specific to the lodging/hotel industry.
    /// </summary>
    [DataContract(Name = "Lodging")]
    public partial class Lodging : IEquatable<Lodging>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Lodging" /> class.
        /// </summary>
        /// <param name="arrivalDate">Date of arrival..</param>
        /// <param name="departureDate">Date of departure..</param>
        /// <param name="folioNumber">Portfolio number..</param>
        /// <param name="extraCharges">Information about charges other than base lodging..</param>
        /// <param name="noShowIndicator">Indicates if the transaction is associated with a delayed or no-show penalty..</param>
        public Lodging(DateTime arrivalDate = default(DateTime), DateTime departureDate = default(DateTime), string folioNumber = default(string), List<LodgingExtraCharges> extraCharges = default(List<LodgingExtraCharges>), bool noShowIndicator = default(bool))
        {
            this.ArrivalDate = arrivalDate;
            this.DepartureDate = departureDate;
            this.FolioNumber = folioNumber;
            this.ExtraCharges = extraCharges;
            this.NoShowIndicator = noShowIndicator;
        }

        /// <summary>
        /// Date of arrival.
        /// </summary>
        /// <value>Date of arrival.</value>
        [DataMember(Name = "arrivalDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ArrivalDate { get; set; }

        /// <summary>
        /// Date of departure.
        /// </summary>
        /// <value>Date of departure.</value>
        [DataMember(Name = "departureDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DepartureDate { get; set; }

        /// <summary>
        /// Portfolio number.
        /// </summary>
        /// <value>Portfolio number.</value>
        [DataMember(Name = "folioNumber", EmitDefaultValue = false)]
        public string FolioNumber { get; set; }

        /// <summary>
        /// Information about charges other than base lodging.
        /// </summary>
        /// <value>Information about charges other than base lodging.</value>
        [DataMember(Name = "extraCharges", EmitDefaultValue = false)]
        public List<LodgingExtraCharges> ExtraCharges { get; set; }

        /// <summary>
        /// Indicates if the transaction is associated with a delayed or no-show penalty.
        /// </summary>
        /// <value>Indicates if the transaction is associated with a delayed or no-show penalty.</value>
        [DataMember(Name = "noShowIndicator", EmitDefaultValue = true)]
        public bool? NoShowIndicator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Lodging {\n");
            sb.Append("  ArrivalDate: ").Append(ArrivalDate).Append("\n");
            sb.Append("  DepartureDate: ").Append(DepartureDate).Append("\n");
            sb.Append("  FolioNumber: ").Append(FolioNumber).Append("\n");
            sb.Append("  ExtraCharges: ").Append(ExtraCharges).Append("\n");
            sb.Append("  NoShowIndicator: ").Append(NoShowIndicator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Lodging);
        }

        /// <summary>
        /// Returns true if Lodging instances are equal
        /// </summary>
        /// <param name="input">Instance of Lodging to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Lodging input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ArrivalDate == input.ArrivalDate ||
                    (this.ArrivalDate != null &&
                    this.ArrivalDate.Equals(input.ArrivalDate))
                ) && 
                (
                    this.DepartureDate == input.DepartureDate ||
                    (this.DepartureDate != null &&
                    this.DepartureDate.Equals(input.DepartureDate))
                ) && 
                (
                    this.FolioNumber == input.FolioNumber ||
                    (this.FolioNumber != null &&
                    this.FolioNumber.Equals(input.FolioNumber))
                ) && 
                (
                    this.ExtraCharges == input.ExtraCharges ||
                    this.ExtraCharges != null &&
                    input.ExtraCharges != null &&
                    this.ExtraCharges.SequenceEqual(input.ExtraCharges)
                ) && 
                (
                    this.NoShowIndicator == input.NoShowIndicator ||
                    this.NoShowIndicator.Equals(input.NoShowIndicator)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ArrivalDate != null)
                    hashCode = hashCode * 59 + this.ArrivalDate.GetHashCode();
                if (this.DepartureDate != null)
                    hashCode = hashCode * 59 + this.DepartureDate.GetHashCode();
                if (this.FolioNumber != null)
                    hashCode = hashCode * 59 + this.FolioNumber.GetHashCode();
                if (this.ExtraCharges != null)
                    hashCode = hashCode * 59 + this.ExtraCharges.GetHashCode();
                hashCode = hashCode * 59 + this.NoShowIndicator.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FolioNumber (string) maxLength
            if(this.FolioNumber != null && this.FolioNumber.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FolioNumber, length must be less than 20.", new [] { "FolioNumber" });
            }

            yield break;
        }
    }
}
