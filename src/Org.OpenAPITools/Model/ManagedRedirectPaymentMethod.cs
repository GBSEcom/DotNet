/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.5.0.20211029.001
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Accomodate other Payment method that is not listed above
    /// </summary>
    [DataContract(Name = "ManagedRedirectPaymentMethod")]
    public partial class ManagedRedirectPaymentMethod : IEquatable<ManagedRedirectPaymentMethod>, IValidatableObject
    {
        /// <summary>
        /// Payment Method Type Enum
        /// </summary>
        /// <value>Payment Method Type Enum</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentMethodTypeEnum
        {
            /// <summary>
            /// Enum GIROPAY for value: GIROPAY
            /// </summary>
            [EnumMember(Value = "GIROPAY")]
            GIROPAY = 1,

            /// <summary>
            /// Enum IDEAL for value: IDEAL
            /// </summary>
            [EnumMember(Value = "IDEAL")]
            IDEAL = 2,

            /// <summary>
            /// Enum KLARNA for value: KLARNA
            /// </summary>
            [EnumMember(Value = "KLARNA")]
            KLARNA = 3,

            /// <summary>
            /// Enum KPS for value: KPS
            /// </summary>
            [EnumMember(Value = "KPS")]
            KPS = 4,

            /// <summary>
            /// Enum PAYPAL for value: PAYPAL
            /// </summary>
            [EnumMember(Value = "PAYPAL")]
            PAYPAL = 5,

            /// <summary>
            /// Enum SBPSOTHERPAYMENTS for value: SBPS_OTHER_PAYMENTS
            /// </summary>
            [EnumMember(Value = "SBPS_OTHER_PAYMENTS")]
            SBPSOTHERPAYMENTS = 6,

            /// <summary>
            /// Enum SOFORT for value: SOFORT
            /// </summary>
            [EnumMember(Value = "SOFORT")]
            SOFORT = 7

        }


        /// <summary>
        /// Payment Method Type Enum
        /// </summary>
        /// <value>Payment Method Type Enum</value>
        [DataMember(Name = "paymentMethodType", EmitDefaultValue = false)]
        public PaymentMethodTypeEnum? PaymentMethodType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagedRedirectPaymentMethod" /> class.
        /// </summary>
        /// <param name="paymentMethodType">Payment Method Type Enum.</param>
        public ManagedRedirectPaymentMethod(PaymentMethodTypeEnum? paymentMethodType = default(PaymentMethodTypeEnum?))
        {
            this.PaymentMethodType = paymentMethodType;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManagedRedirectPaymentMethod {\n");
            sb.Append("  PaymentMethodType: ").Append(PaymentMethodType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ManagedRedirectPaymentMethod);
        }

        /// <summary>
        /// Returns true if ManagedRedirectPaymentMethod instances are equal
        /// </summary>
        /// <param name="input">Instance of ManagedRedirectPaymentMethod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManagedRedirectPaymentMethod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PaymentMethodType == input.PaymentMethodType ||
                    this.PaymentMethodType.Equals(input.PaymentMethodType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.PaymentMethodType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
