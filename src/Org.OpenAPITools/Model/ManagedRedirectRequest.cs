/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.4.0.20210824.002
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Request to generate an embedded payment link for Managed redirect.
    /// </summary>
    [DataContract(Name = "ManagedRedirectRequest")]
    public partial class ManagedRedirectRequest : IEquatable<ManagedRedirectRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TransactionType
        /// </summary>
        [DataMember(Name = "transactionType", IsRequired = true, EmitDefaultValue = false)]
        public ManagedRedirectTransactionType TransactionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagedRedirectRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ManagedRedirectRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManagedRedirectRequest" /> class.
        /// </summary>
        /// <param name="transactionAmount">transactionAmount (required).</param>
        /// <param name="storeId">An optional Outlet ID for clients that support multiple stores in the same developer app..</param>
        /// <param name="merchantTransactionId">The unique merchant transaction ID from the request, if supplied..</param>
        /// <param name="transactionType">transactionType (required).</param>
        /// <param name="order">order.</param>
        /// <param name="redirectAttributes">redirectAttributes.</param>
        /// <param name="paymentMethod">Various payment methods the Gateway supports. Abstract class, do not use this class directly, use one of its children. (required).</param>
        public ManagedRedirectRequest(Amount transactionAmount = default(Amount), string storeId = default(string), string merchantTransactionId = default(string), ManagedRedirectTransactionType transactionType = default(ManagedRedirectTransactionType), Order order = default(Order), RedirectAttributes redirectAttributes = default(RedirectAttributes), Object paymentMethod = default(Object))
        {
            // to ensure "transactionAmount" is required (not null)
            this.TransactionAmount = transactionAmount ?? throw new ArgumentNullException("transactionAmount is a required property for ManagedRedirectRequest and cannot be null");
            this.TransactionType = transactionType;
            // to ensure "paymentMethod" is required (not null)
            this.PaymentMethod = paymentMethod ?? throw new ArgumentNullException("paymentMethod is a required property for ManagedRedirectRequest and cannot be null");
            this.StoreId = storeId;
            this.MerchantTransactionId = merchantTransactionId;
            this.Order = order;
            this.RedirectAttributes = redirectAttributes;
        }

        /// <summary>
        /// Gets or Sets TransactionAmount
        /// </summary>
        [DataMember(Name = "transactionAmount", IsRequired = true, EmitDefaultValue = false)]
        public Amount TransactionAmount { get; set; }

        /// <summary>
        /// An optional Outlet ID for clients that support multiple stores in the same developer app.
        /// </summary>
        /// <value>An optional Outlet ID for clients that support multiple stores in the same developer app.</value>
        [DataMember(Name = "storeId", EmitDefaultValue = false)]
        public string StoreId { get; set; }

        /// <summary>
        /// The unique merchant transaction ID from the request, if supplied.
        /// </summary>
        /// <value>The unique merchant transaction ID from the request, if supplied.</value>
        [DataMember(Name = "merchantTransactionId", EmitDefaultValue = false)]
        public string MerchantTransactionId { get; set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public Order Order { get; set; }

        /// <summary>
        /// Gets or Sets RedirectAttributes
        /// </summary>
        [DataMember(Name = "redirectAttributes", EmitDefaultValue = false)]
        public RedirectAttributes RedirectAttributes { get; set; }

        /// <summary>
        /// Various payment methods the Gateway supports. Abstract class, do not use this class directly, use one of its children.
        /// </summary>
        /// <value>Various payment methods the Gateway supports. Abstract class, do not use this class directly, use one of its children.</value>
        [DataMember(Name = "paymentMethod", IsRequired = true, EmitDefaultValue = false)]
        public Object PaymentMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManagedRedirectRequest {\n");
            sb.Append("  TransactionAmount: ").Append(TransactionAmount).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  MerchantTransactionId: ").Append(MerchantTransactionId).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  RedirectAttributes: ").Append(RedirectAttributes).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ManagedRedirectRequest);
        }

        /// <summary>
        /// Returns true if ManagedRedirectRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ManagedRedirectRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManagedRedirectRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransactionAmount == input.TransactionAmount ||
                    (this.TransactionAmount != null &&
                    this.TransactionAmount.Equals(input.TransactionAmount))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.MerchantTransactionId == input.MerchantTransactionId ||
                    (this.MerchantTransactionId != null &&
                    this.MerchantTransactionId.Equals(input.MerchantTransactionId))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    this.TransactionType.Equals(input.TransactionType)
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.RedirectAttributes == input.RedirectAttributes ||
                    (this.RedirectAttributes != null &&
                    this.RedirectAttributes.Equals(input.RedirectAttributes))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransactionAmount != null)
                    hashCode = hashCode * 59 + this.TransactionAmount.GetHashCode();
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                if (this.MerchantTransactionId != null)
                    hashCode = hashCode * 59 + this.MerchantTransactionId.GetHashCode();
                hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.RedirectAttributes != null)
                    hashCode = hashCode * 59 + this.RedirectAttributes.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StoreId (string) maxLength
            if(this.StoreId != null && this.StoreId.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StoreId, length must be less than 20.", new [] { "StoreId" });
            }

            // MerchantTransactionId (string) maxLength
            if(this.MerchantTransactionId != null && this.MerchantTransactionId.Length > 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantTransactionId, length must be less than 40.", new [] { "MerchantTransactionId" });
            }

            yield break;
        }
    }
}
