/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.5.0.20211029.001
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Payment card model.
    /// </summary>
    [DataContract(Name = "PaymentCard")]
    public partial class PaymentCard : IEquatable<PaymentCard>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets CardFunction
        /// </summary>
        [DataMember(Name = "cardFunction", EmitDefaultValue = false)]
        public CardFunction? CardFunction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentCard" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PaymentCard() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentCard" /> class.
        /// </summary>
        /// <param name="number">Payment card number. (required).</param>
        /// <param name="expiryDate">expiryDate.</param>
        /// <param name="securityCode">Card verification value/number..</param>
        /// <param name="cardFunction">cardFunction.</param>
        /// <param name="cardholderName">Name of the cardholder. Note - Only supported with request payload..</param>
        /// <param name="bin">The payment card BIN..</param>
        /// <param name="last4">The last 4 numbers of a payment card..</param>
        /// <param name="brand">Required only if using dual branded card..</param>
        public PaymentCard(string number = default(string), Expiration expiryDate = default(Expiration), string securityCode = default(string), CardFunction? cardFunction = default(CardFunction?), string cardholderName = default(string), string bin = default(string), string last4 = default(string), string brand = default(string))
        {
            // to ensure "number" is required (not null)
            this.Number = number ?? throw new ArgumentNullException("number is a required property for PaymentCard and cannot be null");
            this.ExpiryDate = expiryDate;
            this.SecurityCode = securityCode;
            this.CardFunction = cardFunction;
            this.CardholderName = cardholderName;
            this.Bin = bin;
            this.Last4 = last4;
            this.Brand = brand;
        }

        /// <summary>
        /// Payment card number.
        /// </summary>
        /// <value>Payment card number.</value>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets ExpiryDate
        /// </summary>
        [DataMember(Name = "expiryDate", EmitDefaultValue = false)]
        public Expiration ExpiryDate { get; set; }

        /// <summary>
        /// Card verification value/number.
        /// </summary>
        /// <value>Card verification value/number.</value>
        [DataMember(Name = "securityCode", EmitDefaultValue = false)]
        public string SecurityCode { get; set; }

        /// <summary>
        /// Name of the cardholder. Note - Only supported with request payload.
        /// </summary>
        /// <value>Name of the cardholder. Note - Only supported with request payload.</value>
        [DataMember(Name = "cardholderName", EmitDefaultValue = false)]
        public string CardholderName { get; set; }

        /// <summary>
        /// The payment card BIN.
        /// </summary>
        /// <value>The payment card BIN.</value>
        [DataMember(Name = "bin", EmitDefaultValue = false)]
        public string Bin { get; set; }

        /// <summary>
        /// The last 4 numbers of a payment card.
        /// </summary>
        /// <value>The last 4 numbers of a payment card.</value>
        [DataMember(Name = "last4", EmitDefaultValue = false)]
        public string Last4 { get; set; }

        /// <summary>
        /// Required only if using dual branded card.
        /// </summary>
        /// <value>Required only if using dual branded card.</value>
        [DataMember(Name = "brand", EmitDefaultValue = false)]
        public string Brand { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentCard {\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  SecurityCode: ").Append(SecurityCode).Append("\n");
            sb.Append("  CardFunction: ").Append(CardFunction).Append("\n");
            sb.Append("  CardholderName: ").Append(CardholderName).Append("\n");
            sb.Append("  Bin: ").Append(Bin).Append("\n");
            sb.Append("  Last4: ").Append(Last4).Append("\n");
            sb.Append("  Brand: ").Append(Brand).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentCard);
        }

        /// <summary>
        /// Returns true if PaymentCard instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentCard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentCard input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && 
                (
                    this.SecurityCode == input.SecurityCode ||
                    (this.SecurityCode != null &&
                    this.SecurityCode.Equals(input.SecurityCode))
                ) && 
                (
                    this.CardFunction == input.CardFunction ||
                    this.CardFunction.Equals(input.CardFunction)
                ) && 
                (
                    this.CardholderName == input.CardholderName ||
                    (this.CardholderName != null &&
                    this.CardholderName.Equals(input.CardholderName))
                ) && 
                (
                    this.Bin == input.Bin ||
                    (this.Bin != null &&
                    this.Bin.Equals(input.Bin))
                ) && 
                (
                    this.Last4 == input.Last4 ||
                    (this.Last4 != null &&
                    this.Last4.Equals(input.Last4))
                ) && 
                (
                    this.Brand == input.Brand ||
                    (this.Brand != null &&
                    this.Brand.Equals(input.Brand))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.ExpiryDate != null)
                    hashCode = hashCode * 59 + this.ExpiryDate.GetHashCode();
                if (this.SecurityCode != null)
                    hashCode = hashCode * 59 + this.SecurityCode.GetHashCode();
                hashCode = hashCode * 59 + this.CardFunction.GetHashCode();
                if (this.CardholderName != null)
                    hashCode = hashCode * 59 + this.CardholderName.GetHashCode();
                if (this.Bin != null)
                    hashCode = hashCode * 59 + this.Bin.GetHashCode();
                if (this.Last4 != null)
                    hashCode = hashCode * 59 + this.Last4.GetHashCode();
                if (this.Brand != null)
                    hashCode = hashCode * 59 + this.Brand.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Number (string) pattern
            Regex regexNumber = new Regex(@"[0-9]{13,19}", RegexOptions.CultureInvariant);
            if (false == regexNumber.Match(this.Number).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Number, must match a pattern of " + regexNumber, new [] { "Number" });
            }

            // SecurityCode (string) maxLength
            if(this.SecurityCode != null && this.SecurityCode.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SecurityCode, length must be less than 4.", new [] { "SecurityCode" });
            }

            // SecurityCode (string) minLength
            if(this.SecurityCode != null && this.SecurityCode.Length < 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SecurityCode, length must be greater than 3.", new [] { "SecurityCode" });
            }

            // CardholderName (string) maxLength
            if(this.CardholderName != null && this.CardholderName.Length > 96)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CardholderName, length must be less than 96.", new [] { "CardholderName" });
            }

            yield break;
        }
    }
}
