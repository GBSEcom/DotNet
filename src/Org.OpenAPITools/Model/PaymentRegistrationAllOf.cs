/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.4.0.20210824.002
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PaymentRegistrationAllOf
    /// </summary>
    [DataContract(Name = "PaymentRegistration_allOf")]
    public partial class PaymentRegistrationAllOf : IEquatable<PaymentRegistrationAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRegistrationAllOf" /> class.
        /// </summary>
        /// <param name="originalTransactionType">Defines the type of the original transaction that is being evaluated for the Fraud Score..</param>
        /// <param name="issuerResponse">issuerResponse.</param>
        /// <param name="verificationAvs">verificationAvs.</param>
        /// <param name="verification3ds">verification3ds.</param>
        /// <param name="verificationCvv">verificationCvv.</param>
        /// <param name="registrationMethod">registrationMethod.</param>
        public PaymentRegistrationAllOf(string originalTransactionType = default(string), IssuerResponse issuerResponse = default(IssuerResponse), VerificationAvs verificationAvs = default(VerificationAvs), Verification3ds verification3ds = default(Verification3ds), VerificationCvv verificationCvv = default(VerificationCvv), RegistrationMethod registrationMethod = default(RegistrationMethod))
        {
            this.OriginalTransactionType = originalTransactionType;
            this.IssuerResponse = issuerResponse;
            this.VerificationAvs = verificationAvs;
            this.Verification3ds = verification3ds;
            this.VerificationCvv = verificationCvv;
            this.RegistrationMethod = registrationMethod;
        }

        /// <summary>
        /// Defines the type of the original transaction that is being evaluated for the Fraud Score.
        /// </summary>
        /// <value>Defines the type of the original transaction that is being evaluated for the Fraud Score.</value>
        [DataMember(Name = "originalTransactionType", EmitDefaultValue = false)]
        public string OriginalTransactionType { get; set; }

        /// <summary>
        /// Gets or Sets IssuerResponse
        /// </summary>
        [DataMember(Name = "issuerResponse", EmitDefaultValue = false)]
        public IssuerResponse IssuerResponse { get; set; }

        /// <summary>
        /// Gets or Sets VerificationAvs
        /// </summary>
        [DataMember(Name = "verificationAvs", EmitDefaultValue = false)]
        public VerificationAvs VerificationAvs { get; set; }

        /// <summary>
        /// Gets or Sets Verification3ds
        /// </summary>
        [DataMember(Name = "verification3ds", EmitDefaultValue = false)]
        public Verification3ds Verification3ds { get; set; }

        /// <summary>
        /// Gets or Sets VerificationCvv
        /// </summary>
        [DataMember(Name = "verificationCvv", EmitDefaultValue = false)]
        public VerificationCvv VerificationCvv { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationMethod
        /// </summary>
        [DataMember(Name = "registrationMethod", EmitDefaultValue = false)]
        public RegistrationMethod RegistrationMethod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentRegistrationAllOf {\n");
            sb.Append("  OriginalTransactionType: ").Append(OriginalTransactionType).Append("\n");
            sb.Append("  IssuerResponse: ").Append(IssuerResponse).Append("\n");
            sb.Append("  VerificationAvs: ").Append(VerificationAvs).Append("\n");
            sb.Append("  Verification3ds: ").Append(Verification3ds).Append("\n");
            sb.Append("  VerificationCvv: ").Append(VerificationCvv).Append("\n");
            sb.Append("  RegistrationMethod: ").Append(RegistrationMethod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentRegistrationAllOf);
        }

        /// <summary>
        /// Returns true if PaymentRegistrationAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentRegistrationAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRegistrationAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OriginalTransactionType == input.OriginalTransactionType ||
                    (this.OriginalTransactionType != null &&
                    this.OriginalTransactionType.Equals(input.OriginalTransactionType))
                ) && 
                (
                    this.IssuerResponse == input.IssuerResponse ||
                    (this.IssuerResponse != null &&
                    this.IssuerResponse.Equals(input.IssuerResponse))
                ) && 
                (
                    this.VerificationAvs == input.VerificationAvs ||
                    (this.VerificationAvs != null &&
                    this.VerificationAvs.Equals(input.VerificationAvs))
                ) && 
                (
                    this.Verification3ds == input.Verification3ds ||
                    (this.Verification3ds != null &&
                    this.Verification3ds.Equals(input.Verification3ds))
                ) && 
                (
                    this.VerificationCvv == input.VerificationCvv ||
                    (this.VerificationCvv != null &&
                    this.VerificationCvv.Equals(input.VerificationCvv))
                ) && 
                (
                    this.RegistrationMethod == input.RegistrationMethod ||
                    (this.RegistrationMethod != null &&
                    this.RegistrationMethod.Equals(input.RegistrationMethod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OriginalTransactionType != null)
                    hashCode = hashCode * 59 + this.OriginalTransactionType.GetHashCode();
                if (this.IssuerResponse != null)
                    hashCode = hashCode * 59 + this.IssuerResponse.GetHashCode();
                if (this.VerificationAvs != null)
                    hashCode = hashCode * 59 + this.VerificationAvs.GetHashCode();
                if (this.Verification3ds != null)
                    hashCode = hashCode * 59 + this.Verification3ds.GetHashCode();
                if (this.VerificationCvv != null)
                    hashCode = hashCode * 59 + this.VerificationCvv.GetHashCode();
                if (this.RegistrationMethod != null)
                    hashCode = hashCode * 59 + this.RegistrationMethod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
