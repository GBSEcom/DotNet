/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.5.0.20211029.001
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Non-technical detail provided by the payer or merchant.
    /// </summary>
    [DataContract(Name = "ProvideDetailPaymentStepResponse")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(ProvideDetailPaymentStepResponse), "provide-detail")]
    public partial class ProvideDetailPaymentStepResponse : PaymentStepResponse, IEquatable<ProvideDetailPaymentStepResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvideDetailPaymentStepResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProvideDetailPaymentStepResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvideDetailPaymentStepResponse" /> class.
        /// </summary>
        /// <param name="detailKey">MerchantIdentifier of the provided detail..</param>
        /// <param name="detailValue">Value provided by the payer or merchant, validated by JavaScript regular expression.</param>
        /// <param name="type">type (required) (default to &quot;ProvideDetailPaymentStepResponse&quot;).</param>
        public ProvideDetailPaymentStepResponse(string detailKey = default(string), string detailValue = default(string), string type = "ProvideDetailPaymentStepResponse") : base()
        {
            this.DetailKey = detailKey;
            this.DetailValue = detailValue;
        }

        /// <summary>
        /// MerchantIdentifier of the provided detail.
        /// </summary>
        /// <value>MerchantIdentifier of the provided detail.</value>
        [DataMember(Name = "detailKey", EmitDefaultValue = false)]
        public string DetailKey { get; set; }

        /// <summary>
        /// Value provided by the payer or merchant, validated by JavaScript regular expression
        /// </summary>
        /// <value>Value provided by the payer or merchant, validated by JavaScript regular expression</value>
        [DataMember(Name = "detailValue", EmitDefaultValue = false)]
        public string DetailValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProvideDetailPaymentStepResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  DetailKey: ").Append(DetailKey).Append("\n");
            sb.Append("  DetailValue: ").Append(DetailValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProvideDetailPaymentStepResponse);
        }

        /// <summary>
        /// Returns true if ProvideDetailPaymentStepResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ProvideDetailPaymentStepResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProvideDetailPaymentStepResponse input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.DetailKey == input.DetailKey ||
                    (this.DetailKey != null &&
                    this.DetailKey.Equals(input.DetailKey))
                ) && base.Equals(input) && 
                (
                    this.DetailValue == input.DetailValue ||
                    (this.DetailValue != null &&
                    this.DetailValue.Equals(input.DetailValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.DetailKey != null)
                    hashCode = hashCode * 59 + this.DetailKey.GetHashCode();
                if (this.DetailValue != null)
                    hashCode = hashCode * 59 + this.DetailValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
