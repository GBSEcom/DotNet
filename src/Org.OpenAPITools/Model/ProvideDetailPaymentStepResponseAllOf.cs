/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.5.0.20211029.001
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProvideDetailPaymentStepResponseAllOf
    /// </summary>
    [DataContract(Name = "ProvideDetailPaymentStepResponse_allOf")]
    public partial class ProvideDetailPaymentStepResponseAllOf : IEquatable<ProvideDetailPaymentStepResponseAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProvideDetailPaymentStepResponseAllOf" /> class.
        /// </summary>
        /// <param name="detailKey">MerchantIdentifier of the provided detail..</param>
        /// <param name="detailValue">Value provided by the payer or merchant, validated by JavaScript regular expression.</param>
        public ProvideDetailPaymentStepResponseAllOf(string detailKey = default(string), string detailValue = default(string))
        {
            this.DetailKey = detailKey;
            this.DetailValue = detailValue;
        }

        /// <summary>
        /// MerchantIdentifier of the provided detail.
        /// </summary>
        /// <value>MerchantIdentifier of the provided detail.</value>
        [DataMember(Name = "detailKey", EmitDefaultValue = false)]
        public string DetailKey { get; set; }

        /// <summary>
        /// Value provided by the payer or merchant, validated by JavaScript regular expression
        /// </summary>
        /// <value>Value provided by the payer or merchant, validated by JavaScript regular expression</value>
        [DataMember(Name = "detailValue", EmitDefaultValue = false)]
        public string DetailValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProvideDetailPaymentStepResponseAllOf {\n");
            sb.Append("  DetailKey: ").Append(DetailKey).Append("\n");
            sb.Append("  DetailValue: ").Append(DetailValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProvideDetailPaymentStepResponseAllOf);
        }

        /// <summary>
        /// Returns true if ProvideDetailPaymentStepResponseAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of ProvideDetailPaymentStepResponseAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProvideDetailPaymentStepResponseAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DetailKey == input.DetailKey ||
                    (this.DetailKey != null &&
                    this.DetailKey.Equals(input.DetailKey))
                ) && 
                (
                    this.DetailValue == input.DetailValue ||
                    (this.DetailValue != null &&
                    this.DetailValue.Equals(input.DetailValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DetailKey != null)
                    hashCode = hashCode * 59 + this.DetailKey.GetHashCode();
                if (this.DetailValue != null)
                    hashCode = hashCode * 59 + this.DetailValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
