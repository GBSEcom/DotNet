/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.3.0.20210608.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Defines receipt related parameters that are necessary to generate a receipt.
    /// </summary>
    [DataContract]
    public partial class ReceiptRequestInfo : IEquatable<ReceiptRequestInfo>, IValidatableObject
    {
        /// <summary>
        /// Defines the consumer of the receipt (e.g. cardholder, merchant).
        /// </summary>
        /// <value>Defines the consumer of the receipt (e.g. cardholder, merchant).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Cardholder for value: cardholder
            /// </summary>
            [EnumMember(Value = "cardholder")]
            Cardholder = 1,

            /// <summary>
            /// Enum Merchant for value: merchant
            /// </summary>
            [EnumMember(Value = "merchant")]
            Merchant = 2

        }

        /// <summary>
        /// Defines the consumer of the receipt (e.g. cardholder, merchant).
        /// </summary>
        /// <value>Defines the consumer of the receipt (e.g. cardholder, merchant).</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiptRequestInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReceiptRequestInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReceiptRequestInfo" /> class.
        /// </summary>
        /// <param name="type">Defines the consumer of the receipt (e.g. cardholder, merchant). (required).</param>
        /// <param name="locale">The locale of the receipt. The format has to be a well-formed BCP 47 language tag..</param>
        /// <param name="linewidth">The line width of the receipt. Default will be 32 characters. (default to 32).</param>
        public ReceiptRequestInfo(TypeEnum type = default(TypeEnum), string locale = default(string), int linewidth = 32)
        {
            // to ensure "type" is required (not null)
            this.Type = type;
            this.Locale = locale;
            // use default value if no "linewidth" provided
            this.Linewidth = linewidth;
        }

        /// <summary>
        /// The locale of the receipt. The format has to be a well-formed BCP 47 language tag.
        /// </summary>
        /// <value>The locale of the receipt. The format has to be a well-formed BCP 47 language tag.</value>
        [DataMember(Name = "locale", EmitDefaultValue = false)]
        public string Locale { get; set; }

        /// <summary>
        /// The line width of the receipt. Default will be 32 characters.
        /// </summary>
        /// <value>The line width of the receipt. Default will be 32 characters.</value>
        [DataMember(Name = "linewidth", EmitDefaultValue = false)]
        public int Linewidth { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReceiptRequestInfo {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  Linewidth: ").Append(Linewidth).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReceiptRequestInfo);
        }

        /// <summary>
        /// Returns true if ReceiptRequestInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ReceiptRequestInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReceiptRequestInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.Linewidth == input.Linewidth ||
                    (this.Linewidth != null &&
                    this.Linewidth.Equals(input.Linewidth))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                if (this.Linewidth != null)
                    hashCode = hashCode * 59 + this.Linewidth.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
