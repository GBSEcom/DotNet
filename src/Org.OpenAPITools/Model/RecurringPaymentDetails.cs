/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.5.0.20211029.001
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Details about existing gateway schedule.
    /// </summary>
    [DataContract(Name = "RecurringPaymentDetails")]
    public partial class RecurringPaymentDetails : IEquatable<RecurringPaymentDetails>, IValidatableObject
    {
        /// <summary>
        /// State of the recurring payment.
        /// </summary>
        /// <value>State of the recurring payment.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum Installed for value: Installed
            /// </summary>
            [EnumMember(Value = "Installed")]
            Installed = 1,

            /// <summary>
            /// Enum Inactivated for value: Inactivated
            /// </summary>
            [EnumMember(Value = "Inactivated")]
            Inactivated = 2,

            /// <summary>
            /// Enum Cancelled for value: Cancelled
            /// </summary>
            [EnumMember(Value = "Cancelled")]
            Cancelled = 3

        }


        /// <summary>
        /// State of the recurring payment.
        /// </summary>
        /// <value>State of the recurring payment.</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecurringPaymentDetails" /> class.
        /// </summary>
        /// <param name="storeId">Store ID number..</param>
        /// <param name="purchaseOrderNumber">Purchase order number..</param>
        /// <param name="invoiceNumber">Invoice number..</param>
        /// <param name="creationDate">Date recurring payment was created..</param>
        /// <param name="startDate">Date of mandate signature..</param>
        /// <param name="nextAttemptDate">Date of next transaction process attempt..</param>
        /// <param name="transactionAmount">transactionAmount.</param>
        /// <param name="paymentMethodDetails">paymentMethodDetails.</param>
        /// <param name="frequency">frequency.</param>
        /// <param name="numberOfPayments">Number of times the recurring payment will process..</param>
        /// <param name="runCount">Times the recurring payment has already run..</param>
        /// <param name="state">State of the recurring payment..</param>
        /// <param name="comments">User supplied comments..</param>
        public RecurringPaymentDetails(string storeId = default(string), string purchaseOrderNumber = default(string), string invoiceNumber = default(string), string creationDate = default(string), string startDate = default(string), string nextAttemptDate = default(string), Amount transactionAmount = default(Amount), PaymentMethodDetails paymentMethodDetails = default(PaymentMethodDetails), Frequency frequency = default(Frequency), int numberOfPayments = default(int), int runCount = default(int), StateEnum? state = default(StateEnum?), string comments = default(string))
        {
            this.StoreId = storeId;
            this.PurchaseOrderNumber = purchaseOrderNumber;
            this.InvoiceNumber = invoiceNumber;
            this.CreationDate = creationDate;
            this.StartDate = startDate;
            this.NextAttemptDate = nextAttemptDate;
            this.TransactionAmount = transactionAmount;
            this.PaymentMethodDetails = paymentMethodDetails;
            this.Frequency = frequency;
            this.NumberOfPayments = numberOfPayments;
            this.RunCount = runCount;
            this.State = state;
            this.Comments = comments;
        }

        /// <summary>
        /// Store ID number.
        /// </summary>
        /// <value>Store ID number.</value>
        [DataMember(Name = "storeId", EmitDefaultValue = false)]
        public string StoreId { get; set; }

        /// <summary>
        /// Purchase order number.
        /// </summary>
        /// <value>Purchase order number.</value>
        [DataMember(Name = "purchaseOrderNumber", EmitDefaultValue = false)]
        public string PurchaseOrderNumber { get; set; }

        /// <summary>
        /// Invoice number.
        /// </summary>
        /// <value>Invoice number.</value>
        [DataMember(Name = "invoiceNumber", EmitDefaultValue = false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Date recurring payment was created.
        /// </summary>
        /// <value>Date recurring payment was created.</value>
        [DataMember(Name = "creationDate", EmitDefaultValue = false)]
        public string CreationDate { get; set; }

        /// <summary>
        /// Date of mandate signature.
        /// </summary>
        /// <value>Date of mandate signature.</value>
        [DataMember(Name = "startDate", EmitDefaultValue = false)]
        public string StartDate { get; set; }

        /// <summary>
        /// Date of next transaction process attempt.
        /// </summary>
        /// <value>Date of next transaction process attempt.</value>
        [DataMember(Name = "nextAttemptDate", EmitDefaultValue = false)]
        public string NextAttemptDate { get; set; }

        /// <summary>
        /// Gets or Sets TransactionAmount
        /// </summary>
        [DataMember(Name = "transactionAmount", EmitDefaultValue = false)]
        public Amount TransactionAmount { get; set; }

        /// <summary>
        /// Gets or Sets PaymentMethodDetails
        /// </summary>
        [DataMember(Name = "paymentMethodDetails", EmitDefaultValue = false)]
        public PaymentMethodDetails PaymentMethodDetails { get; set; }

        /// <summary>
        /// Gets or Sets Frequency
        /// </summary>
        [DataMember(Name = "frequency", EmitDefaultValue = false)]
        public Frequency Frequency { get; set; }

        /// <summary>
        /// Number of times the recurring payment will process.
        /// </summary>
        /// <value>Number of times the recurring payment will process.</value>
        [DataMember(Name = "numberOfPayments", EmitDefaultValue = false)]
        public int NumberOfPayments { get; set; }

        /// <summary>
        /// Times the recurring payment has already run.
        /// </summary>
        /// <value>Times the recurring payment has already run.</value>
        [DataMember(Name = "runCount", EmitDefaultValue = false)]
        public int RunCount { get; set; }

        /// <summary>
        /// User supplied comments.
        /// </summary>
        /// <value>User supplied comments.</value>
        [DataMember(Name = "comments", EmitDefaultValue = false)]
        public string Comments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecurringPaymentDetails {\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  PurchaseOrderNumber: ").Append(PurchaseOrderNumber).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  NextAttemptDate: ").Append(NextAttemptDate).Append("\n");
            sb.Append("  TransactionAmount: ").Append(TransactionAmount).Append("\n");
            sb.Append("  PaymentMethodDetails: ").Append(PaymentMethodDetails).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  NumberOfPayments: ").Append(NumberOfPayments).Append("\n");
            sb.Append("  RunCount: ").Append(RunCount).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecurringPaymentDetails);
        }

        /// <summary>
        /// Returns true if RecurringPaymentDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of RecurringPaymentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecurringPaymentDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.PurchaseOrderNumber == input.PurchaseOrderNumber ||
                    (this.PurchaseOrderNumber != null &&
                    this.PurchaseOrderNumber.Equals(input.PurchaseOrderNumber))
                ) && 
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    (this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(input.InvoiceNumber))
                ) && 
                (
                    this.CreationDate == input.CreationDate ||
                    (this.CreationDate != null &&
                    this.CreationDate.Equals(input.CreationDate))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.NextAttemptDate == input.NextAttemptDate ||
                    (this.NextAttemptDate != null &&
                    this.NextAttemptDate.Equals(input.NextAttemptDate))
                ) && 
                (
                    this.TransactionAmount == input.TransactionAmount ||
                    (this.TransactionAmount != null &&
                    this.TransactionAmount.Equals(input.TransactionAmount))
                ) && 
                (
                    this.PaymentMethodDetails == input.PaymentMethodDetails ||
                    (this.PaymentMethodDetails != null &&
                    this.PaymentMethodDetails.Equals(input.PaymentMethodDetails))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                ) && 
                (
                    this.NumberOfPayments == input.NumberOfPayments ||
                    this.NumberOfPayments.Equals(input.NumberOfPayments)
                ) && 
                (
                    this.RunCount == input.RunCount ||
                    this.RunCount.Equals(input.RunCount)
                ) && 
                (
                    this.State == input.State ||
                    this.State.Equals(input.State)
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                if (this.PurchaseOrderNumber != null)
                    hashCode = hashCode * 59 + this.PurchaseOrderNumber.GetHashCode();
                if (this.InvoiceNumber != null)
                    hashCode = hashCode * 59 + this.InvoiceNumber.GetHashCode();
                if (this.CreationDate != null)
                    hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.NextAttemptDate != null)
                    hashCode = hashCode * 59 + this.NextAttemptDate.GetHashCode();
                if (this.TransactionAmount != null)
                    hashCode = hashCode * 59 + this.TransactionAmount.GetHashCode();
                if (this.PaymentMethodDetails != null)
                    hashCode = hashCode * 59 + this.PaymentMethodDetails.GetHashCode();
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                hashCode = hashCode * 59 + this.NumberOfPayments.GetHashCode();
                hashCode = hashCode * 59 + this.RunCount.GetHashCode();
                hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StoreId (string) maxLength
            if(this.StoreId != null && this.StoreId.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StoreId, length must be less than 20.", new [] { "StoreId" });
            }

            // NumberOfPayments (int) maximum
            if(this.NumberOfPayments > (int)999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberOfPayments, must be a value less than or equal to 999.", new [] { "NumberOfPayments" });
            }

            // NumberOfPayments (int) minimum
            if(this.NumberOfPayments < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberOfPayments, must be a value greater than or equal to 1.", new [] { "NumberOfPayments" });
            }

            // RunCount (int) maximum
            if(this.RunCount > (int)999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RunCount, must be a value less than or equal to 999.", new [] { "RunCount" });
            }

            // RunCount (int) minimum
            if(this.RunCount < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RunCount, must be a value greater than or equal to 0.", new [] { "RunCount" });
            }

            yield break;
        }
    }
}
