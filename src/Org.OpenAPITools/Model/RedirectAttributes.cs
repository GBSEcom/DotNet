/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.4.0.20210824.002
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Attributes for controlling transactions with additional parameters like dccFlow, &#39;3ds&#39; flows.
    /// </summary>
    [DataContract(Name = "RedirectAttributes")]
    public partial class RedirectAttributes : IEquatable<RedirectAttributes>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not a challenge should be performed. 01 &#x3D; No preference (You have no preference whether a challenge should be performed. This is the default value) 02 &#x3D; No challenge requested (You prefer that no challenge should be performed) 03 &#x3D; Challenge requested: 3DS Requestor Preference (You prefer that a challenge should be performed) 04 &#x3D; Challenge requested: Mandate (There are local or regional mandates that mean that a challenge must be performed) 
        /// </summary>
        /// <value>Indicates whether or not a challenge should be performed. 01 &#x3D; No preference (You have no preference whether a challenge should be performed. This is the default value) 02 &#x3D; No challenge requested (You prefer that no challenge should be performed) 03 &#x3D; Challenge requested: 3DS Requestor Preference (You prefer that a challenge should be performed) 04 &#x3D; Challenge requested: Mandate (There are local or regional mandates that mean that a challenge must be performed) </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ChallengeIndicatorEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            [EnumMember(Value = "01")]
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            [EnumMember(Value = "02")]
            _02 = 2,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            [EnumMember(Value = "03")]
            _03 = 3,

            /// <summary>
            /// Enum _04 for value: 04
            /// </summary>
            [EnumMember(Value = "04")]
            _04 = 4

        }


        /// <summary>
        /// Indicates whether or not a challenge should be performed. 01 &#x3D; No preference (You have no preference whether a challenge should be performed. This is the default value) 02 &#x3D; No challenge requested (You prefer that no challenge should be performed) 03 &#x3D; Challenge requested: 3DS Requestor Preference (You prefer that a challenge should be performed) 04 &#x3D; Challenge requested: Mandate (There are local or regional mandates that mean that a challenge must be performed) 
        /// </summary>
        /// <value>Indicates whether or not a challenge should be performed. 01 &#x3D; No preference (You have no preference whether a challenge should be performed. This is the default value) 02 &#x3D; No challenge requested (You prefer that no challenge should be performed) 03 &#x3D; Challenge requested: 3DS Requestor Preference (You prefer that a challenge should be performed) 04 &#x3D; Challenge requested: Mandate (There are local or regional mandates that mean that a challenge must be performed) </value>
        [DataMember(Name = "challengeIndicator", EmitDefaultValue = false)]
        public ChallengeIndicatorEnum? ChallengeIndicator { get; set; }
        /// <summary>
        /// EmvCo Messag Category
        /// </summary>
        /// <value>EmvCo Messag Category</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ThreeDSEmvCoMessageCategoryEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            [EnumMember(Value = "01")]
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            [EnumMember(Value = "02")]
            _02 = 2,

            /// <summary>
            /// Enum _80 for value: 80
            /// </summary>
            [EnumMember(Value = "80")]
            _80 = 3

        }


        /// <summary>
        /// EmvCo Messag Category
        /// </summary>
        /// <value>EmvCo Messag Category</value>
        [DataMember(Name = "threeDSEmvCoMessageCategory", EmitDefaultValue = false)]
        public ThreeDSEmvCoMessageCategoryEnum? ThreeDSEmvCoMessageCategory { get; set; }
        /// <summary>
        /// Secure 3D Transaction Type
        /// </summary>
        /// <value>Secure 3D Transaction Type</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ThreeDSTransactionTypeEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            [EnumMember(Value = "01")]
            _01 = 1,

            /// <summary>
            /// Enum _03 for value: 03
            /// </summary>
            [EnumMember(Value = "03")]
            _03 = 2,

            /// <summary>
            /// Enum _10 for value: 10
            /// </summary>
            [EnumMember(Value = "10")]
            _10 = 3,

            /// <summary>
            /// Enum _11 for value: 11
            /// </summary>
            [EnumMember(Value = "11")]
            _11 = 4,

            /// <summary>
            /// Enum _28 for value: 28
            /// </summary>
            [EnumMember(Value = "28")]
            _28 = 5

        }


        /// <summary>
        /// Secure 3D Transaction Type
        /// </summary>
        /// <value>Secure 3D Transaction Type</value>
        [DataMember(Name = "threeDSTransactionType", EmitDefaultValue = false)]
        public ThreeDSTransactionTypeEnum? ThreeDSTransactionType { get; set; }
        /// <summary>
        /// Payment Mode
        /// </summary>
        /// <value>Payment Mode</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PaymentModeEnum
        {
            /// <summary>
            /// Enum FULLPAY for value: FULLPAY
            /// </summary>
            [EnumMember(Value = "FULLPAY")]
            FULLPAY = 1,

            /// <summary>
            /// Enum PAYONLY for value: PAYONLY
            /// </summary>
            [EnumMember(Value = "PAYONLY")]
            PAYONLY = 2,

            /// <summary>
            /// Enum PAYPLUS for value: PAYPLUS
            /// </summary>
            [EnumMember(Value = "PAYPLUS")]
            PAYPLUS = 3

        }


        /// <summary>
        /// Payment Mode
        /// </summary>
        /// <value>Payment Mode</value>
        [DataMember(Name = "paymentMode", EmitDefaultValue = false)]
        public PaymentModeEnum? PaymentMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RedirectAttributes" /> class.
        /// </summary>
        /// <param name="challengeIndicator">Indicates whether or not a challenge should be performed. 01 &#x3D; No preference (You have no preference whether a challenge should be performed. This is the default value) 02 &#x3D; No challenge requested (You prefer that no challenge should be performed) 03 &#x3D; Challenge requested: 3DS Requestor Preference (You prefer that a challenge should be performed) 04 &#x3D; Challenge requested: Mandate (There are local or regional mandates that mean that a challenge must be performed)  (default to ChallengeIndicatorEnum._01).</param>
        /// <param name="authenticateTransaction">If 3D secure should be applied..</param>
        /// <param name="threeDSEmvCoMessageCategory">EmvCo Messag Category.</param>
        /// <param name="browserJavaScriptEnabled">Browser Java Script Enabled flag (default to false).</param>
        /// <param name="override3dsCountryExclusion">Override 3ds Country Exclusion flag (default to false).</param>
        /// <param name="threeDSTransactionType">Secure 3D Transaction Type.</param>
        /// <param name="skipTRA">skip TRA exemption for the transaction (default to false).</param>
        /// <param name="fullBypass">Full by pass flag (default to false).</param>
        /// <param name="mobileMode">Mobile mode flag (default to false).</param>
        /// <param name="paymentMode">Payment Mode.</param>
        /// <param name="language">Language used by client..</param>
        public RedirectAttributes(ChallengeIndicatorEnum? challengeIndicator = ChallengeIndicatorEnum._01, bool authenticateTransaction = default(bool), ThreeDSEmvCoMessageCategoryEnum? threeDSEmvCoMessageCategory = default(ThreeDSEmvCoMessageCategoryEnum?), bool browserJavaScriptEnabled = false, bool override3dsCountryExclusion = false, ThreeDSTransactionTypeEnum? threeDSTransactionType = default(ThreeDSTransactionTypeEnum?), bool skipTRA = false, bool fullBypass = false, bool mobileMode = false, PaymentModeEnum? paymentMode = default(PaymentModeEnum?), string language = default(string))
        {
            this.ChallengeIndicator = challengeIndicator;
            this.AuthenticateTransaction = authenticateTransaction;
            this.ThreeDSEmvCoMessageCategory = threeDSEmvCoMessageCategory;
            this.BrowserJavaScriptEnabled = browserJavaScriptEnabled;
            this.Override3dsCountryExclusion = override3dsCountryExclusion;
            this.ThreeDSTransactionType = threeDSTransactionType;
            this.SkipTRA = skipTRA;
            this.FullBypass = fullBypass;
            this.MobileMode = mobileMode;
            this.PaymentMode = paymentMode;
            this.Language = language;
        }

        /// <summary>
        /// If 3D secure should be applied.
        /// </summary>
        /// <value>If 3D secure should be applied.</value>
        [DataMember(Name = "authenticateTransaction", EmitDefaultValue = true)]
        public bool? AuthenticateTransaction { get; set; }

        /// <summary>
        /// Browser Java Script Enabled flag
        /// </summary>
        /// <value>Browser Java Script Enabled flag</value>
        [DataMember(Name = "browserJavaScriptEnabled", EmitDefaultValue = true)]
        public bool? BrowserJavaScriptEnabled { get; set; }

        /// <summary>
        /// Override 3ds Country Exclusion flag
        /// </summary>
        /// <value>Override 3ds Country Exclusion flag</value>
        [DataMember(Name = "override3dsCountryExclusion", EmitDefaultValue = true)]
        public bool? Override3dsCountryExclusion { get; set; }

        /// <summary>
        /// skip TRA exemption for the transaction
        /// </summary>
        /// <value>skip TRA exemption for the transaction</value>
        [DataMember(Name = "skipTRA", EmitDefaultValue = true)]
        public bool? SkipTRA { get; set; }

        /// <summary>
        /// Full by pass flag
        /// </summary>
        /// <value>Full by pass flag</value>
        [DataMember(Name = "fullBypass", EmitDefaultValue = true)]
        public bool? FullBypass { get; set; }

        /// <summary>
        /// Mobile mode flag
        /// </summary>
        /// <value>Mobile mode flag</value>
        [DataMember(Name = "mobileMode", EmitDefaultValue = true)]
        public bool? MobileMode { get; set; }

        /// <summary>
        /// Language used by client.
        /// </summary>
        /// <value>Language used by client.</value>
        [DataMember(Name = "language", EmitDefaultValue = false)]
        public string Language { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RedirectAttributes {\n");
            sb.Append("  ChallengeIndicator: ").Append(ChallengeIndicator).Append("\n");
            sb.Append("  AuthenticateTransaction: ").Append(AuthenticateTransaction).Append("\n");
            sb.Append("  ThreeDSEmvCoMessageCategory: ").Append(ThreeDSEmvCoMessageCategory).Append("\n");
            sb.Append("  BrowserJavaScriptEnabled: ").Append(BrowserJavaScriptEnabled).Append("\n");
            sb.Append("  Override3dsCountryExclusion: ").Append(Override3dsCountryExclusion).Append("\n");
            sb.Append("  ThreeDSTransactionType: ").Append(ThreeDSTransactionType).Append("\n");
            sb.Append("  SkipTRA: ").Append(SkipTRA).Append("\n");
            sb.Append("  FullBypass: ").Append(FullBypass).Append("\n");
            sb.Append("  MobileMode: ").Append(MobileMode).Append("\n");
            sb.Append("  PaymentMode: ").Append(PaymentMode).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RedirectAttributes);
        }

        /// <summary>
        /// Returns true if RedirectAttributes instances are equal
        /// </summary>
        /// <param name="input">Instance of RedirectAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RedirectAttributes input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChallengeIndicator == input.ChallengeIndicator ||
                    this.ChallengeIndicator.Equals(input.ChallengeIndicator)
                ) && 
                (
                    this.AuthenticateTransaction == input.AuthenticateTransaction ||
                    this.AuthenticateTransaction.Equals(input.AuthenticateTransaction)
                ) && 
                (
                    this.ThreeDSEmvCoMessageCategory == input.ThreeDSEmvCoMessageCategory ||
                    this.ThreeDSEmvCoMessageCategory.Equals(input.ThreeDSEmvCoMessageCategory)
                ) && 
                (
                    this.BrowserJavaScriptEnabled == input.BrowserJavaScriptEnabled ||
                    this.BrowserJavaScriptEnabled.Equals(input.BrowserJavaScriptEnabled)
                ) && 
                (
                    this.Override3dsCountryExclusion == input.Override3dsCountryExclusion ||
                    this.Override3dsCountryExclusion.Equals(input.Override3dsCountryExclusion)
                ) && 
                (
                    this.ThreeDSTransactionType == input.ThreeDSTransactionType ||
                    this.ThreeDSTransactionType.Equals(input.ThreeDSTransactionType)
                ) && 
                (
                    this.SkipTRA == input.SkipTRA ||
                    this.SkipTRA.Equals(input.SkipTRA)
                ) && 
                (
                    this.FullBypass == input.FullBypass ||
                    this.FullBypass.Equals(input.FullBypass)
                ) && 
                (
                    this.MobileMode == input.MobileMode ||
                    this.MobileMode.Equals(input.MobileMode)
                ) && 
                (
                    this.PaymentMode == input.PaymentMode ||
                    this.PaymentMode.Equals(input.PaymentMode)
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.ChallengeIndicator.GetHashCode();
                hashCode = hashCode * 59 + this.AuthenticateTransaction.GetHashCode();
                hashCode = hashCode * 59 + this.ThreeDSEmvCoMessageCategory.GetHashCode();
                hashCode = hashCode * 59 + this.BrowserJavaScriptEnabled.GetHashCode();
                hashCode = hashCode * 59 + this.Override3dsCountryExclusion.GetHashCode();
                hashCode = hashCode * 59 + this.ThreeDSTransactionType.GetHashCode();
                hashCode = hashCode * 59 + this.SkipTRA.GetHashCode();
                hashCode = hashCode * 59 + this.FullBypass.GetHashCode();
                hashCode = hashCode * 59 + this.MobileMode.GetHashCode();
                hashCode = hashCode * 59 + this.PaymentMode.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Language (string) pattern
            Regex regexLanguage = new Regex(@"^(?!\\s*$).+", RegexOptions.CultureInvariant);
            if (false == regexLanguage.Match(this.Language).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Language, must match a pattern of " + regexLanguage, new [] { "Language" });
            }

            yield break;
        }
    }
}
