/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.4.0.20210824.002
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Used to generate payment tokens with an existing order ID.
    /// </summary>
    [DataContract(Name = "ReferencedOrderPaymentTokenizationRequest")]
    [JsonConverter(typeof(JsonSubtypes), "RequestType")]
    public partial class ReferencedOrderPaymentTokenizationRequest : PaymentTokenizationRequest, IEquatable<ReferencedOrderPaymentTokenizationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferencedOrderPaymentTokenizationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReferencedOrderPaymentTokenizationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReferencedOrderPaymentTokenizationRequest" /> class.
        /// </summary>
        /// <param name="referencedOrderId">Retrieves the payment instrument information from an existing order. (required).</param>
        /// <param name="requestType">Object name of tokenization request. (required) (default to &quot;ReferencedOrderPaymentTokenizationRequest&quot;).</param>
        /// <param name="storeId">An optional outlet ID for clients that support multiple stores in the same app..</param>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="createToken">createToken (required).</param>
        /// <param name="accountVerification">If the account should be verified prior to token creation. (default to false).</param>
        /// <param name="merchantTransactionId">The unique merchant transaction ID from the request, if supplied..</param>
        /// <param name="additionalDetails">additionalDetails.</param>
        public ReferencedOrderPaymentTokenizationRequest(string referencedOrderId = default(string), string requestType = "ReferencedOrderPaymentTokenizationRequest", string storeId = default(string), Address billingAddress = default(Address), CreatePaymentToken createToken = default(CreatePaymentToken), bool accountVerification = false, string merchantTransactionId = default(string), AdditionalDetails additionalDetails = default(AdditionalDetails)) : base(requestType, storeId, billingAddress, createToken, accountVerification, merchantTransactionId, additionalDetails)
        {
            // to ensure "referencedOrderId" is required (not null)
            this.ReferencedOrderId = referencedOrderId ?? throw new ArgumentNullException("referencedOrderId is a required property for ReferencedOrderPaymentTokenizationRequest and cannot be null");
        }

        /// <summary>
        /// Retrieves the payment instrument information from an existing order.
        /// </summary>
        /// <value>Retrieves the payment instrument information from an existing order.</value>
        [DataMember(Name = "referencedOrderId", IsRequired = true, EmitDefaultValue = false)]
        public string ReferencedOrderId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReferencedOrderPaymentTokenizationRequest {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ReferencedOrderId: ").Append(ReferencedOrderId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReferencedOrderPaymentTokenizationRequest);
        }

        /// <summary>
        /// Returns true if ReferencedOrderPaymentTokenizationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ReferencedOrderPaymentTokenizationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReferencedOrderPaymentTokenizationRequest input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.ReferencedOrderId == input.ReferencedOrderId ||
                    (this.ReferencedOrderId != null &&
                    this.ReferencedOrderId.Equals(input.ReferencedOrderId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ReferencedOrderId != null)
                    hashCode = hashCode * 59 + this.ReferencedOrderId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // ReferencedOrderId (string) pattern
            Regex regexReferencedOrderId = new Regex(@"^(?!\\s*$).+", RegexOptions.CultureInvariant);
            if (false == regexReferencedOrderId.Match(this.ReferencedOrderId).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReferencedOrderId, must match a pattern of " + regexReferencedOrderId, new [] { "ReferencedOrderId" });
            }

            yield break;
        }
    }
}
