/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.5.0.20211029.001
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Fraud detect response.
    /// </summary>
    [DataContract(Name = "ScoreOnlyResponse")]
    public partial class ScoreOnlyResponse : IEquatable<ScoreOnlyResponse>, IValidatableObject
    {
        /// <summary>
        /// Please refer to \&quot;Errors Section\&quot; for more info.
        /// </summary>
        /// <value>Please refer to \&quot;Errors Section\&quot; for more info.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionStatusEnum
        {
            /// <summary>
            /// Enum ScoredSuccessfully for value: Scored Successfully
            /// </summary>
            [EnumMember(Value = "Scored Successfully")]
            ScoredSuccessfully = 1,

            /// <summary>
            /// Enum NotProcessed for value: Not Processed
            /// </summary>
            [EnumMember(Value = "Not Processed")]
            NotProcessed = 2

        }


        /// <summary>
        /// Please refer to \&quot;Errors Section\&quot; for more info.
        /// </summary>
        /// <value>Please refer to \&quot;Errors Section\&quot; for more info.</value>
        [DataMember(Name = "transactionStatus", EmitDefaultValue = false)]
        public TransactionStatusEnum? TransactionStatus { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScoreOnlyResponse" /> class.
        /// </summary>
        /// <param name="correlationId">Unique trace ID for issue triage..</param>
        /// <param name="transactionStatus">Please refer to \&quot;Errors Section\&quot; for more info..</param>
        /// <param name="validationStatus">If status returned is \&quot;failure\&quot;, input validation errors occurred. Please refer to the \&quot;Errors Section\&quot; for more info. Valid values are &#39;success&#39; and &#39;failure&#39;..</param>
        /// <param name="transactionType">The transactionType provided in request..</param>
        /// <param name="fraudScore">fraudScore.</param>
        public ScoreOnlyResponse(string correlationId = default(string), TransactionStatusEnum? transactionStatus = default(TransactionStatusEnum?), string validationStatus = default(string), string transactionType = default(string), ScoreOnlyResponseFraudScore fraudScore = default(ScoreOnlyResponseFraudScore))
        {
            this.CorrelationId = correlationId;
            this.TransactionStatus = transactionStatus;
            this.ValidationStatus = validationStatus;
            this.TransactionType = transactionType;
            this.FraudScore = fraudScore;
        }

        /// <summary>
        /// Unique trace ID for issue triage.
        /// </summary>
        /// <value>Unique trace ID for issue triage.</value>
        [DataMember(Name = "correlationId", EmitDefaultValue = false)]
        public string CorrelationId { get; set; }

        /// <summary>
        /// If status returned is \&quot;failure\&quot;, input validation errors occurred. Please refer to the \&quot;Errors Section\&quot; for more info. Valid values are &#39;success&#39; and &#39;failure&#39;.
        /// </summary>
        /// <value>If status returned is \&quot;failure\&quot;, input validation errors occurred. Please refer to the \&quot;Errors Section\&quot; for more info. Valid values are &#39;success&#39; and &#39;failure&#39;.</value>
        [DataMember(Name = "validationStatus", EmitDefaultValue = false)]
        public string ValidationStatus { get; set; }

        /// <summary>
        /// The transactionType provided in request.
        /// </summary>
        /// <value>The transactionType provided in request.</value>
        [DataMember(Name = "transactionType", EmitDefaultValue = false)]
        public string TransactionType { get; set; }

        /// <summary>
        /// Gets or Sets FraudScore
        /// </summary>
        [DataMember(Name = "fraudScore", EmitDefaultValue = false)]
        public ScoreOnlyResponseFraudScore FraudScore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScoreOnlyResponse {\n");
            sb.Append("  CorrelationId: ").Append(CorrelationId).Append("\n");
            sb.Append("  TransactionStatus: ").Append(TransactionStatus).Append("\n");
            sb.Append("  ValidationStatus: ").Append(ValidationStatus).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  FraudScore: ").Append(FraudScore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScoreOnlyResponse);
        }

        /// <summary>
        /// Returns true if ScoreOnlyResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of ScoreOnlyResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScoreOnlyResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CorrelationId == input.CorrelationId ||
                    (this.CorrelationId != null &&
                    this.CorrelationId.Equals(input.CorrelationId))
                ) && 
                (
                    this.TransactionStatus == input.TransactionStatus ||
                    this.TransactionStatus.Equals(input.TransactionStatus)
                ) && 
                (
                    this.ValidationStatus == input.ValidationStatus ||
                    (this.ValidationStatus != null &&
                    this.ValidationStatus.Equals(input.ValidationStatus))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) && 
                (
                    this.FraudScore == input.FraudScore ||
                    (this.FraudScore != null &&
                    this.FraudScore.Equals(input.FraudScore))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CorrelationId != null)
                    hashCode = hashCode * 59 + this.CorrelationId.GetHashCode();
                hashCode = hashCode * 59 + this.TransactionStatus.GetHashCode();
                if (this.ValidationStatus != null)
                    hashCode = hashCode * 59 + this.ValidationStatus.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.FraudScore != null)
                    hashCode = hashCode * 59 + this.FraudScore.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
