/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.5.0.20211029.001
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Authentication update request specific to 3DSecure 1.0 transactions. DEPRECATED - use Secure3DAuthenticationUpdateRequest instead
    /// </summary>
    [DataContract(Name = "Secure3D10AuthenticationUpdateRequest")]
    [JsonConverter(typeof(JsonSubtypes), "AuthenticationType")]
    public partial class Secure3D10AuthenticationUpdateRequest : AuthenticationUpdateRequest, IEquatable<Secure3D10AuthenticationUpdateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Secure3D10AuthenticationUpdateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Secure3D10AuthenticationUpdateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Secure3D10AuthenticationUpdateRequest" /> class.
        /// </summary>
        /// <param name="payerAuthenticationResponse">A formatted message providing results of the issuer’s cardholder authentication. (required).</param>
        /// <param name="merchantData">Formatted string encoding transaction time, order ID, and return URL data..</param>
        /// <param name="securityCode">Card security code if required by merchant..</param>
        /// <param name="storeId">An optional Outlet ID for clients that support multiple stores in the same developer app..</param>
        /// <param name="authenticationType">Object name of the authentication update request. (required) (default to &quot;Secure3D10AuthenticationUpdateRequest&quot;).</param>
        /// <param name="billingAddress">billingAddress.</param>
        public Secure3D10AuthenticationUpdateRequest(string payerAuthenticationResponse = default(string), string merchantData = default(string), string securityCode = default(string), string storeId = default(string), string authenticationType = "Secure3D10AuthenticationUpdateRequest", Address billingAddress = default(Address)) : base(storeId, authenticationType, billingAddress)
        {
            // to ensure "payerAuthenticationResponse" is required (not null)
            this.PayerAuthenticationResponse = payerAuthenticationResponse ?? throw new ArgumentNullException("payerAuthenticationResponse is a required property for Secure3D10AuthenticationUpdateRequest and cannot be null");
            this.MerchantData = merchantData;
            this.SecurityCode = securityCode;
        }

        /// <summary>
        /// A formatted message providing results of the issuer’s cardholder authentication.
        /// </summary>
        /// <value>A formatted message providing results of the issuer’s cardholder authentication.</value>
        [DataMember(Name = "payerAuthenticationResponse", IsRequired = true, EmitDefaultValue = false)]
        public string PayerAuthenticationResponse { get; set; }

        /// <summary>
        /// Formatted string encoding transaction time, order ID, and return URL data.
        /// </summary>
        /// <value>Formatted string encoding transaction time, order ID, and return URL data.</value>
        [DataMember(Name = "merchantData", EmitDefaultValue = false)]
        public string MerchantData { get; set; }

        /// <summary>
        /// Card security code if required by merchant.
        /// </summary>
        /// <value>Card security code if required by merchant.</value>
        [DataMember(Name = "securityCode", EmitDefaultValue = false)]
        public string SecurityCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Secure3D10AuthenticationUpdateRequest {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  PayerAuthenticationResponse: ").Append(PayerAuthenticationResponse).Append("\n");
            sb.Append("  MerchantData: ").Append(MerchantData).Append("\n");
            sb.Append("  SecurityCode: ").Append(SecurityCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Secure3D10AuthenticationUpdateRequest);
        }

        /// <summary>
        /// Returns true if Secure3D10AuthenticationUpdateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of Secure3D10AuthenticationUpdateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Secure3D10AuthenticationUpdateRequest input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.PayerAuthenticationResponse == input.PayerAuthenticationResponse ||
                    (this.PayerAuthenticationResponse != null &&
                    this.PayerAuthenticationResponse.Equals(input.PayerAuthenticationResponse))
                ) && base.Equals(input) && 
                (
                    this.MerchantData == input.MerchantData ||
                    (this.MerchantData != null &&
                    this.MerchantData.Equals(input.MerchantData))
                ) && base.Equals(input) && 
                (
                    this.SecurityCode == input.SecurityCode ||
                    (this.SecurityCode != null &&
                    this.SecurityCode.Equals(input.SecurityCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.PayerAuthenticationResponse != null)
                    hashCode = hashCode * 59 + this.PayerAuthenticationResponse.GetHashCode();
                if (this.MerchantData != null)
                    hashCode = hashCode * 59 + this.MerchantData.GetHashCode();
                if (this.SecurityCode != null)
                    hashCode = hashCode * 59 + this.SecurityCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            yield break;
        }
    }
}
