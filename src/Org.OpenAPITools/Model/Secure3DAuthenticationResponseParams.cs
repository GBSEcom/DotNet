/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.4.0.20210824.002
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Additional parameters for authentication redirect.
    /// </summary>
    [DataContract(Name = "Secure3DAuthenticationResponse_params")]
    public partial class Secure3DAuthenticationResponseParams : IEquatable<Secure3DAuthenticationResponseParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Secure3DAuthenticationResponseParams" /> class.
        /// </summary>
        /// <param name="payerAuthenticationRequest">Message sent from merchant server to authenticate the cardholder..</param>
        /// <param name="termURL">Terminal URL for processing request..</param>
        /// <param name="merchantData">Formatted string encoding transaction time, order ID, and return URL data..</param>
        /// <param name="acsURL">The URL for the authentication redirect for the merchant..</param>
        /// <param name="cReq">The CReq message initiates cardholder interaction in a 3DS 2.x challenge flow and carries authentication data from the cardholder..</param>
        /// <param name="sessionData">Customer web browser session data..</param>
        public Secure3DAuthenticationResponseParams(string payerAuthenticationRequest = default(string), string termURL = default(string), string merchantData = default(string), string acsURL = default(string), string cReq = default(string), string sessionData = default(string))
        {
            this.PayerAuthenticationRequest = payerAuthenticationRequest;
            this.TermURL = termURL;
            this.MerchantData = merchantData;
            this.AcsURL = acsURL;
            this.CReq = cReq;
            this.SessionData = sessionData;
        }

        /// <summary>
        /// Message sent from merchant server to authenticate the cardholder.
        /// </summary>
        /// <value>Message sent from merchant server to authenticate the cardholder.</value>
        [DataMember(Name = "payerAuthenticationRequest", EmitDefaultValue = false)]
        public string PayerAuthenticationRequest { get; set; }

        /// <summary>
        /// Terminal URL for processing request.
        /// </summary>
        /// <value>Terminal URL for processing request.</value>
        [DataMember(Name = "termURL", EmitDefaultValue = false)]
        public string TermURL { get; set; }

        /// <summary>
        /// Formatted string encoding transaction time, order ID, and return URL data.
        /// </summary>
        /// <value>Formatted string encoding transaction time, order ID, and return URL data.</value>
        [DataMember(Name = "merchantData", EmitDefaultValue = false)]
        public string MerchantData { get; set; }

        /// <summary>
        /// The URL for the authentication redirect for the merchant.
        /// </summary>
        /// <value>The URL for the authentication redirect for the merchant.</value>
        [DataMember(Name = "acsURL", EmitDefaultValue = false)]
        public string AcsURL { get; set; }

        /// <summary>
        /// The CReq message initiates cardholder interaction in a 3DS 2.x challenge flow and carries authentication data from the cardholder.
        /// </summary>
        /// <value>The CReq message initiates cardholder interaction in a 3DS 2.x challenge flow and carries authentication data from the cardholder.</value>
        [DataMember(Name = "cReq", EmitDefaultValue = false)]
        public string CReq { get; set; }

        /// <summary>
        /// Customer web browser session data.
        /// </summary>
        /// <value>Customer web browser session data.</value>
        [DataMember(Name = "sessionData", EmitDefaultValue = false)]
        public string SessionData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Secure3DAuthenticationResponseParams {\n");
            sb.Append("  PayerAuthenticationRequest: ").Append(PayerAuthenticationRequest).Append("\n");
            sb.Append("  TermURL: ").Append(TermURL).Append("\n");
            sb.Append("  MerchantData: ").Append(MerchantData).Append("\n");
            sb.Append("  AcsURL: ").Append(AcsURL).Append("\n");
            sb.Append("  CReq: ").Append(CReq).Append("\n");
            sb.Append("  SessionData: ").Append(SessionData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Secure3DAuthenticationResponseParams);
        }

        /// <summary>
        /// Returns true if Secure3DAuthenticationResponseParams instances are equal
        /// </summary>
        /// <param name="input">Instance of Secure3DAuthenticationResponseParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Secure3DAuthenticationResponseParams input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PayerAuthenticationRequest == input.PayerAuthenticationRequest ||
                    (this.PayerAuthenticationRequest != null &&
                    this.PayerAuthenticationRequest.Equals(input.PayerAuthenticationRequest))
                ) && 
                (
                    this.TermURL == input.TermURL ||
                    (this.TermURL != null &&
                    this.TermURL.Equals(input.TermURL))
                ) && 
                (
                    this.MerchantData == input.MerchantData ||
                    (this.MerchantData != null &&
                    this.MerchantData.Equals(input.MerchantData))
                ) && 
                (
                    this.AcsURL == input.AcsURL ||
                    (this.AcsURL != null &&
                    this.AcsURL.Equals(input.AcsURL))
                ) && 
                (
                    this.CReq == input.CReq ||
                    (this.CReq != null &&
                    this.CReq.Equals(input.CReq))
                ) && 
                (
                    this.SessionData == input.SessionData ||
                    (this.SessionData != null &&
                    this.SessionData.Equals(input.SessionData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PayerAuthenticationRequest != null)
                    hashCode = hashCode * 59 + this.PayerAuthenticationRequest.GetHashCode();
                if (this.TermURL != null)
                    hashCode = hashCode * 59 + this.TermURL.GetHashCode();
                if (this.MerchantData != null)
                    hashCode = hashCode * 59 + this.MerchantData.GetHashCode();
                if (this.AcsURL != null)
                    hashCode = hashCode * 59 + this.AcsURL.GetHashCode();
                if (this.CReq != null)
                    hashCode = hashCode * 59 + this.CReq.GetHashCode();
                if (this.SessionData != null)
                    hashCode = hashCode * 59 + this.SessionData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
