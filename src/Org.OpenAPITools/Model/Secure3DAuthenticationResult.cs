/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.5.0.20211029.001
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Submit the result of the authentication managed outside of the gateway for a 3-D Secure 2.x scheme. For more convenient usage without implementing 3-D Secure yourself see \&quot;authenticationRequest\&quot; section.
    /// </summary>
    [DataContract(Name = "Secure3DAuthenticationResult")]
    [JsonConverter(typeof(JsonSubtypes), "AuthenticationType")]
    public partial class Secure3DAuthenticationResult : AuthenticationResult, IEquatable<Secure3DAuthenticationResult>, IValidatableObject
    {
        /// <summary>
        /// The result of authentication attempt returned by the 3D Secure authentication process (ARes).
        /// </summary>
        /// <value>The result of authentication attempt returned by the 3D Secure authentication process (ARes).</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AuthenticationResponseEnum
        {
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2,

            /// <summary>
            /// Enum U for value: U
            /// </summary>
            [EnumMember(Value = "U")]
            U = 3,

            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 4,

            /// <summary>
            /// Enum C for value: C
            /// </summary>
            [EnumMember(Value = "C")]
            C = 5,

            /// <summary>
            /// Enum R for value: R
            /// </summary>
            [EnumMember(Value = "R")]
            R = 6

        }


        /// <summary>
        /// The result of authentication attempt returned by the 3D Secure authentication process (ARes).
        /// </summary>
        /// <value>The result of authentication attempt returned by the 3D Secure authentication process (ARes).</value>
        [DataMember(Name = "authenticationResponse", EmitDefaultValue = false)]
        public AuthenticationResponseEnum? AuthenticationResponse { get; set; }
        /// <summary>
        /// The transaction status as returned by the 3D Secure authentication process. (CRes)
        /// </summary>
        /// <value>The transaction status as returned by the 3D Secure authentication process. (CRes)</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionStatusEnum
        {
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 1,

            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2,

            /// <summary>
            /// Enum U for value: U
            /// </summary>
            [EnumMember(Value = "U")]
            U = 3,

            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 4,

            /// <summary>
            /// Enum C for value: C
            /// </summary>
            [EnumMember(Value = "C")]
            C = 5,

            /// <summary>
            /// Enum R for value: R
            /// </summary>
            [EnumMember(Value = "R")]
            R = 6

        }


        /// <summary>
        /// The transaction status as returned by the 3D Secure authentication process. (CRes)
        /// </summary>
        /// <value>The transaction status as returned by the 3D Secure authentication process. (CRes)</value>
        [DataMember(Name = "transactionStatus", EmitDefaultValue = false)]
        public TransactionStatusEnum? TransactionStatus { get; set; }
        /// <summary>
        /// Indicates the message category of 3d secure authentication version 2.X. 01 &#x3D; Payment Authentication 02 &#x3D; Non-Payment Authentication 80 &#x3D; Mastercard Data Only 
        /// </summary>
        /// <value>Indicates the message category of 3d secure authentication version 2.X. 01 &#x3D; Payment Authentication 02 &#x3D; Non-Payment Authentication 80 &#x3D; Mastercard Data Only </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MessageCategoryEnum
        {
            /// <summary>
            /// Enum _01 for value: 01
            /// </summary>
            [EnumMember(Value = "01")]
            _01 = 1,

            /// <summary>
            /// Enum _02 for value: 02
            /// </summary>
            [EnumMember(Value = "02")]
            _02 = 2,

            /// <summary>
            /// Enum _80 for value: 80
            /// </summary>
            [EnumMember(Value = "80")]
            _80 = 3

        }


        /// <summary>
        /// Indicates the message category of 3d secure authentication version 2.X. 01 &#x3D; Payment Authentication 02 &#x3D; Non-Payment Authentication 80 &#x3D; Mastercard Data Only 
        /// </summary>
        /// <value>Indicates the message category of 3d secure authentication version 2.X. 01 &#x3D; Payment Authentication 02 &#x3D; Non-Payment Authentication 80 &#x3D; Mastercard Data Only </value>
        [DataMember(Name = "messageCategory", EmitDefaultValue = false)]
        public MessageCategoryEnum? MessageCategory { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Secure3DAuthenticationResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Secure3DAuthenticationResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Secure3DAuthenticationResult" /> class.
        /// </summary>
        /// <param name="cavv">The Cardholder Authentication Verification Value (CAVV) is a cryptographic value derived by the issuer during payment authentication that can provide evidence of the results of payment authentication during an online purchase..</param>
        /// <param name="xid">The transaction identifier (XID) is a unique tracking number set by the merchant..</param>
        /// <param name="dsTransactionId">The response transaction UUID from the DS (directory server).</param>
        /// <param name="authenticationResponse">The result of authentication attempt returned by the 3D Secure authentication process (ARes)..</param>
        /// <param name="transactionStatus">The transaction status as returned by the 3D Secure authentication process. (CRes).</param>
        /// <param name="messageCategory">Indicates the message category of 3d secure authentication version 2.X. 01 &#x3D; Payment Authentication 02 &#x3D; Non-Payment Authentication 80 &#x3D; Mastercard Data Only .</param>
        /// <param name="authenticationType">Specifies the version of 3DS to be used where authentication was managed outside of the gateway. (required) (default to &quot;Secure3DAuthenticationResult&quot;).</param>
        public Secure3DAuthenticationResult(string cavv = default(string), string xid = default(string), string dsTransactionId = default(string), AuthenticationResponseEnum? authenticationResponse = default(AuthenticationResponseEnum?), TransactionStatusEnum? transactionStatus = default(TransactionStatusEnum?), MessageCategoryEnum? messageCategory = default(MessageCategoryEnum?), string authenticationType = "Secure3DAuthenticationResult") : base(authenticationType)
        {
            this.Cavv = cavv;
            this.Xid = xid;
            this.DsTransactionId = dsTransactionId;
            this.AuthenticationResponse = authenticationResponse;
            this.TransactionStatus = transactionStatus;
            this.MessageCategory = messageCategory;
        }

        /// <summary>
        /// The Cardholder Authentication Verification Value (CAVV) is a cryptographic value derived by the issuer during payment authentication that can provide evidence of the results of payment authentication during an online purchase.
        /// </summary>
        /// <value>The Cardholder Authentication Verification Value (CAVV) is a cryptographic value derived by the issuer during payment authentication that can provide evidence of the results of payment authentication during an online purchase.</value>
        [DataMember(Name = "cavv", EmitDefaultValue = false)]
        public string Cavv { get; set; }

        /// <summary>
        /// The transaction identifier (XID) is a unique tracking number set by the merchant.
        /// </summary>
        /// <value>The transaction identifier (XID) is a unique tracking number set by the merchant.</value>
        [DataMember(Name = "xid", EmitDefaultValue = false)]
        public string Xid { get; set; }

        /// <summary>
        /// The response transaction UUID from the DS (directory server)
        /// </summary>
        /// <value>The response transaction UUID from the DS (directory server)</value>
        [DataMember(Name = "dsTransactionId", EmitDefaultValue = false)]
        public string DsTransactionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Secure3DAuthenticationResult {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Cavv: ").Append(Cavv).Append("\n");
            sb.Append("  Xid: ").Append(Xid).Append("\n");
            sb.Append("  DsTransactionId: ").Append(DsTransactionId).Append("\n");
            sb.Append("  AuthenticationResponse: ").Append(AuthenticationResponse).Append("\n");
            sb.Append("  TransactionStatus: ").Append(TransactionStatus).Append("\n");
            sb.Append("  MessageCategory: ").Append(MessageCategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Secure3DAuthenticationResult);
        }

        /// <summary>
        /// Returns true if Secure3DAuthenticationResult instances are equal
        /// </summary>
        /// <param name="input">Instance of Secure3DAuthenticationResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Secure3DAuthenticationResult input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Cavv == input.Cavv ||
                    (this.Cavv != null &&
                    this.Cavv.Equals(input.Cavv))
                ) && base.Equals(input) && 
                (
                    this.Xid == input.Xid ||
                    (this.Xid != null &&
                    this.Xid.Equals(input.Xid))
                ) && base.Equals(input) && 
                (
                    this.DsTransactionId == input.DsTransactionId ||
                    (this.DsTransactionId != null &&
                    this.DsTransactionId.Equals(input.DsTransactionId))
                ) && base.Equals(input) && 
                (
                    this.AuthenticationResponse == input.AuthenticationResponse ||
                    this.AuthenticationResponse.Equals(input.AuthenticationResponse)
                ) && base.Equals(input) && 
                (
                    this.TransactionStatus == input.TransactionStatus ||
                    this.TransactionStatus.Equals(input.TransactionStatus)
                ) && base.Equals(input) && 
                (
                    this.MessageCategory == input.MessageCategory ||
                    this.MessageCategory.Equals(input.MessageCategory)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Cavv != null)
                    hashCode = hashCode * 59 + this.Cavv.GetHashCode();
                if (this.Xid != null)
                    hashCode = hashCode * 59 + this.Xid.GetHashCode();
                if (this.DsTransactionId != null)
                    hashCode = hashCode * 59 + this.DsTransactionId.GetHashCode();
                hashCode = hashCode * 59 + this.AuthenticationResponse.GetHashCode();
                hashCode = hashCode * 59 + this.TransactionStatus.GetHashCode();
                hashCode = hashCode * 59 + this.MessageCategory.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach(var x in BaseValidate(validationContext)) yield return x;
            // Cavv (string) maxLength
            if(this.Cavv != null && this.Cavv.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cavv, length must be less than 32.", new [] { "Cavv" });
            }

            // Cavv (string) minLength
            if(this.Cavv != null && this.Cavv.Length < 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cavv, length must be greater than 20.", new [] { "Cavv" });
            }

            // Xid (string) maxLength
            if(this.Xid != null && this.Xid.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Xid, length must be less than 32.", new [] { "Xid" });
            }

            // Xid (string) minLength
            if(this.Xid != null && this.Xid.Length < 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Xid, length must be greater than 20.", new [] { "Xid" });
            }

            yield break;
        }
    }
}
