/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.3.0.20210608.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The payment object for SEPA Credit Local Payment.
    /// </summary>
    [DataContract]
    public partial class SepaCredit : IEquatable<SepaCredit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SepaCredit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SepaCredit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SepaCredit" /> class.
        /// </summary>
        /// <param name="iban">Bank account in IBAN format. (required).</param>
        /// <param name="name">The name of the Account Holder. (required).</param>
        public SepaCredit(string iban = default(string), string name = default(string))
        {
            // to ensure "iban" is required (not null)
            this.Iban = iban ?? throw new ArgumentNullException("iban is a required property for SepaCredit and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for SepaCredit and cannot be null");
        }

        /// <summary>
        /// Bank account in IBAN format.
        /// </summary>
        /// <value>Bank account in IBAN format.</value>
        [DataMember(Name = "iban", EmitDefaultValue = false)]
        public string Iban { get; set; }

        /// <summary>
        /// The name of the Account Holder.
        /// </summary>
        /// <value>The name of the Account Holder.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SepaCredit {\n");
            sb.Append("  Iban: ").Append(Iban).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SepaCredit);
        }

        /// <summary>
        /// Returns true if SepaCredit instances are equal
        /// </summary>
        /// <param name="input">Instance of SepaCredit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SepaCredit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Iban == input.Iban ||
                    (this.Iban != null &&
                    this.Iban.Equals(input.Iban))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Iban != null)
                    hashCode = hashCode * 59 + this.Iban.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Iban (string) maxLength
            if(this.Iban != null && this.Iban.Length > 34)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Iban, length must be less than 34.", new [] { "Iban" });
            }

            // Iban (string) pattern
            Regex regexIban = new Regex(@"^(?!\\s*$).+", RegexOptions.CultureInvariant);
            if (false == regexIban.Match(this.Iban).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Iban, must match a pattern of " + regexIban, new [] { "Iban" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 70)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 70.", new [] { "Name" });
            }

            // Name (string) pattern
            Regex regexName = new Regex(@"^(?!\\s*$).+", RegexOptions.CultureInvariant);
            if (false == regexName.Match(this.Name).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
            }

            yield break;
        }
    }
}
