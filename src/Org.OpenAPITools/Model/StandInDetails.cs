/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.3.0.20210608.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Indicates standin transaction.
    /// </summary>
    [DataContract]
    public partial class StandInDetails : IEquatable<StandInDetails>, IValidatableObject
    {
        /// <summary>
        /// Indicates standin instruction type.
        /// </summary>
        /// <value>Indicates standin instruction type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StandInTypeEnum
        {
            /// <summary>
            /// Enum FIXEDAMOUNT for value: FIXED_AMOUNT
            /// </summary>
            [EnumMember(Value = "FIXED_AMOUNT")]
            FIXEDAMOUNT = 1,

            /// <summary>
            /// Enum MAXIMUMAMOUNT for value: MAXIMUM_AMOUNT
            /// </summary>
            [EnumMember(Value = "MAXIMUM_AMOUNT")]
            MAXIMUMAMOUNT = 2

        }

        /// <summary>
        /// Indicates standin instruction type.
        /// </summary>
        /// <value>Indicates standin instruction type.</value>
        [DataMember(Name = "standInType", EmitDefaultValue = false)]
        public StandInTypeEnum StandInType { get; set; }
        /// <summary>
        /// Indicates frequency of the standin instruction debit.
        /// </summary>
        /// <value>Indicates frequency of the standin instruction debit.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FrequencyEnum
        {
            /// <summary>
            /// Enum WEEKLY for value: WEEKLY
            /// </summary>
            [EnumMember(Value = "WEEKLY")]
            WEEKLY = 1,

            /// <summary>
            /// Enum FORTNIGHTLY for value: FORTNIGHTLY
            /// </summary>
            [EnumMember(Value = "FORTNIGHTLY")]
            FORTNIGHTLY = 2,

            /// <summary>
            /// Enum MONTHLY for value: MONTHLY
            /// </summary>
            [EnumMember(Value = "MONTHLY")]
            MONTHLY = 3,

            /// <summary>
            /// Enum QUARTERLY for value: QUARTERLY
            /// </summary>
            [EnumMember(Value = "QUARTERLY")]
            QUARTERLY = 4,

            /// <summary>
            /// Enum HALFYEARLY for value: HALFYEARLY
            /// </summary>
            [EnumMember(Value = "HALFYEARLY")]
            HALFYEARLY = 5,

            /// <summary>
            /// Enum YEARLY for value: YEARLY
            /// </summary>
            [EnumMember(Value = "YEARLY")]
            YEARLY = 6,

            /// <summary>
            /// Enum UNSCHEDULED for value: UNSCHEDULED
            /// </summary>
            [EnumMember(Value = "UNSCHEDULED")]
            UNSCHEDULED = 7

        }

        /// <summary>
        /// Indicates frequency of the standin instruction debit.
        /// </summary>
        /// <value>Indicates frequency of the standin instruction debit.</value>
        [DataMember(Name = "frequency", EmitDefaultValue = false)]
        public FrequencyEnum Frequency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StandInDetails" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StandInDetails() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StandInDetails" /> class.
        /// </summary>
        /// <param name="standInType">Indicates standin instruction type. (required).</param>
        /// <param name="numberOfDebits">Indicates number of standin instruction debits.Possible values can be two digit number or UN (Until it is cancelled) or ND (Not defined). (required).</param>
        /// <param name="siValidated">Indicates standin instruction validation flag, it can be true or false. \&quot;false\&quot; - Not validated, \&quot;true\&quot; - Validated. (required).</param>
        /// <param name="maximumTransactionAmount">Maximum debit amount per standin instruction transaction. (required).</param>
        /// <param name="siHubId">Unique identifier for standin instruction. (required).</param>
        /// <param name="frequency">Indicates frequency of the standin instruction debit. (required).</param>
        public StandInDetails(StandInTypeEnum standInType = default(StandInTypeEnum), string numberOfDebits = default(string), bool siValidated = default(bool), decimal maximumTransactionAmount = default(decimal), string siHubId = default(string), FrequencyEnum frequency = default(FrequencyEnum))
        {
            // to ensure "standInType" is required (not null)
            this.StandInType = standInType;
            // to ensure "numberOfDebits" is required (not null)
            this.NumberOfDebits = numberOfDebits ?? throw new ArgumentNullException("numberOfDebits is a required property for StandInDetails and cannot be null");
            // to ensure "siValidated" is required (not null)
            this.SiValidated = siValidated;
            // to ensure "maximumTransactionAmount" is required (not null)
            this.MaximumTransactionAmount = maximumTransactionAmount;
            // to ensure "siHubId" is required (not null)
            this.SiHubId = siHubId ?? throw new ArgumentNullException("siHubId is a required property for StandInDetails and cannot be null");
            // to ensure "frequency" is required (not null)
            this.Frequency = frequency;
        }

        /// <summary>
        /// Indicates number of standin instruction debits.Possible values can be two digit number or UN (Until it is cancelled) or ND (Not defined).
        /// </summary>
        /// <value>Indicates number of standin instruction debits.Possible values can be two digit number or UN (Until it is cancelled) or ND (Not defined).</value>
        [DataMember(Name = "numberOfDebits", EmitDefaultValue = false)]
        public string NumberOfDebits { get; set; }

        /// <summary>
        /// Indicates standin instruction validation flag, it can be true or false. \&quot;false\&quot; - Not validated, \&quot;true\&quot; - Validated.
        /// </summary>
        /// <value>Indicates standin instruction validation flag, it can be true or false. \&quot;false\&quot; - Not validated, \&quot;true\&quot; - Validated.</value>
        [DataMember(Name = "siValidated", EmitDefaultValue = false)]
        public bool SiValidated { get; set; }

        /// <summary>
        /// Maximum debit amount per standin instruction transaction.
        /// </summary>
        /// <value>Maximum debit amount per standin instruction transaction.</value>
        [DataMember(Name = "maximumTransactionAmount", EmitDefaultValue = false)]
        public decimal MaximumTransactionAmount { get; set; }

        /// <summary>
        /// Unique identifier for standin instruction.
        /// </summary>
        /// <value>Unique identifier for standin instruction.</value>
        [DataMember(Name = "siHubId", EmitDefaultValue = false)]
        public string SiHubId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StandInDetails {\n");
            sb.Append("  StandInType: ").Append(StandInType).Append("\n");
            sb.Append("  NumberOfDebits: ").Append(NumberOfDebits).Append("\n");
            sb.Append("  SiValidated: ").Append(SiValidated).Append("\n");
            sb.Append("  MaximumTransactionAmount: ").Append(MaximumTransactionAmount).Append("\n");
            sb.Append("  SiHubId: ").Append(SiHubId).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StandInDetails);
        }

        /// <summary>
        /// Returns true if StandInDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of StandInDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StandInDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StandInType == input.StandInType ||
                    (this.StandInType != null &&
                    this.StandInType.Equals(input.StandInType))
                ) && 
                (
                    this.NumberOfDebits == input.NumberOfDebits ||
                    (this.NumberOfDebits != null &&
                    this.NumberOfDebits.Equals(input.NumberOfDebits))
                ) && 
                (
                    this.SiValidated == input.SiValidated ||
                    (this.SiValidated != null &&
                    this.SiValidated.Equals(input.SiValidated))
                ) && 
                (
                    this.MaximumTransactionAmount == input.MaximumTransactionAmount ||
                    (this.MaximumTransactionAmount != null &&
                    this.MaximumTransactionAmount.Equals(input.MaximumTransactionAmount))
                ) && 
                (
                    this.SiHubId == input.SiHubId ||
                    (this.SiHubId != null &&
                    this.SiHubId.Equals(input.SiHubId))
                ) && 
                (
                    this.Frequency == input.Frequency ||
                    (this.Frequency != null &&
                    this.Frequency.Equals(input.Frequency))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StandInType != null)
                    hashCode = hashCode * 59 + this.StandInType.GetHashCode();
                if (this.NumberOfDebits != null)
                    hashCode = hashCode * 59 + this.NumberOfDebits.GetHashCode();
                if (this.SiValidated != null)
                    hashCode = hashCode * 59 + this.SiValidated.GetHashCode();
                if (this.MaximumTransactionAmount != null)
                    hashCode = hashCode * 59 + this.MaximumTransactionAmount.GetHashCode();
                if (this.SiHubId != null)
                    hashCode = hashCode * 59 + this.SiHubId.GetHashCode();
                if (this.Frequency != null)
                    hashCode = hashCode * 59 + this.Frequency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // NumberOfDebits (string) pattern
            Regex regexNumberOfDebits = new Regex(@"(UN)|(ND)|([0-9]{2})", RegexOptions.CultureInvariant);
            if (false == regexNumberOfDebits.Match(this.NumberOfDebits).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NumberOfDebits, must match a pattern of " + regexNumberOfDebits, new [] { "NumberOfDebits" });
            }

            // SiHubId (string) maxLength
            if(this.SiHubId != null && this.SiHubId.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SiHubId, length must be less than 10.", new [] { "SiHubId" });
            }

            yield break;
        }
    }
}
