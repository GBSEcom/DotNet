/* 
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.3.0.20210608.001
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains Standin response details.
    /// </summary>
    [DataContract]
    public partial class StandinResponseDetails : IEquatable<StandinResponseDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StandinResponseDetails" /> class.
        /// </summary>
        /// <param name="secure3DEnrolmentStatus">Secure 3D Enrolment Status..</param>
        /// <param name="secure3DECI">Secure 3D ECI..</param>
        /// <param name="secure3DAuthenticationResponse">Secure 3D Authentication Response..</param>
        /// <param name="authenticationValue">Secure 3D Authentication Value..</param>
        /// <param name="xID">Secure 3D XID..</param>
        /// <param name="authenticationAlgorithm">Secure 3D Authentication Algorithm..</param>
        public StandinResponseDetails(string secure3DEnrolmentStatus = default(string), string secure3DECI = default(string), string secure3DAuthenticationResponse = default(string), string authenticationValue = default(string), string xID = default(string), string authenticationAlgorithm = default(string))
        {
            this.Secure3DEnrolmentStatus = secure3DEnrolmentStatus;
            this.Secure3DECI = secure3DECI;
            this.Secure3DAuthenticationResponse = secure3DAuthenticationResponse;
            this.AuthenticationValue = authenticationValue;
            this.XID = xID;
            this.AuthenticationAlgorithm = authenticationAlgorithm;
        }

        /// <summary>
        /// Secure 3D Enrolment Status.
        /// </summary>
        /// <value>Secure 3D Enrolment Status.</value>
        [DataMember(Name = "secure3DEnrolmentStatus", EmitDefaultValue = false)]
        public string Secure3DEnrolmentStatus { get; set; }

        /// <summary>
        /// Secure 3D ECI.
        /// </summary>
        /// <value>Secure 3D ECI.</value>
        [DataMember(Name = "secure3DECI", EmitDefaultValue = false)]
        public string Secure3DECI { get; set; }

        /// <summary>
        /// Secure 3D Authentication Response.
        /// </summary>
        /// <value>Secure 3D Authentication Response.</value>
        [DataMember(Name = "secure3DAuthenticationResponse", EmitDefaultValue = false)]
        public string Secure3DAuthenticationResponse { get; set; }

        /// <summary>
        /// Secure 3D Authentication Value.
        /// </summary>
        /// <value>Secure 3D Authentication Value.</value>
        [DataMember(Name = "authenticationValue", EmitDefaultValue = false)]
        public string AuthenticationValue { get; set; }

        /// <summary>
        /// Secure 3D XID.
        /// </summary>
        /// <value>Secure 3D XID.</value>
        [DataMember(Name = "xID", EmitDefaultValue = false)]
        public string XID { get; set; }

        /// <summary>
        /// Secure 3D Authentication Algorithm.
        /// </summary>
        /// <value>Secure 3D Authentication Algorithm.</value>
        [DataMember(Name = "authenticationAlgorithm", EmitDefaultValue = false)]
        public string AuthenticationAlgorithm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StandinResponseDetails {\n");
            sb.Append("  Secure3DEnrolmentStatus: ").Append(Secure3DEnrolmentStatus).Append("\n");
            sb.Append("  Secure3DECI: ").Append(Secure3DECI).Append("\n");
            sb.Append("  Secure3DAuthenticationResponse: ").Append(Secure3DAuthenticationResponse).Append("\n");
            sb.Append("  AuthenticationValue: ").Append(AuthenticationValue).Append("\n");
            sb.Append("  XID: ").Append(XID).Append("\n");
            sb.Append("  AuthenticationAlgorithm: ").Append(AuthenticationAlgorithm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StandinResponseDetails);
        }

        /// <summary>
        /// Returns true if StandinResponseDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of StandinResponseDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StandinResponseDetails input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Secure3DEnrolmentStatus == input.Secure3DEnrolmentStatus ||
                    (this.Secure3DEnrolmentStatus != null &&
                    this.Secure3DEnrolmentStatus.Equals(input.Secure3DEnrolmentStatus))
                ) && 
                (
                    this.Secure3DECI == input.Secure3DECI ||
                    (this.Secure3DECI != null &&
                    this.Secure3DECI.Equals(input.Secure3DECI))
                ) && 
                (
                    this.Secure3DAuthenticationResponse == input.Secure3DAuthenticationResponse ||
                    (this.Secure3DAuthenticationResponse != null &&
                    this.Secure3DAuthenticationResponse.Equals(input.Secure3DAuthenticationResponse))
                ) && 
                (
                    this.AuthenticationValue == input.AuthenticationValue ||
                    (this.AuthenticationValue != null &&
                    this.AuthenticationValue.Equals(input.AuthenticationValue))
                ) && 
                (
                    this.XID == input.XID ||
                    (this.XID != null &&
                    this.XID.Equals(input.XID))
                ) && 
                (
                    this.AuthenticationAlgorithm == input.AuthenticationAlgorithm ||
                    (this.AuthenticationAlgorithm != null &&
                    this.AuthenticationAlgorithm.Equals(input.AuthenticationAlgorithm))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Secure3DEnrolmentStatus != null)
                    hashCode = hashCode * 59 + this.Secure3DEnrolmentStatus.GetHashCode();
                if (this.Secure3DECI != null)
                    hashCode = hashCode * 59 + this.Secure3DECI.GetHashCode();
                if (this.Secure3DAuthenticationResponse != null)
                    hashCode = hashCode * 59 + this.Secure3DAuthenticationResponse.GetHashCode();
                if (this.AuthenticationValue != null)
                    hashCode = hashCode * 59 + this.AuthenticationValue.GetHashCode();
                if (this.XID != null)
                    hashCode = hashCode * 59 + this.XID.GetHashCode();
                if (this.AuthenticationAlgorithm != null)
                    hashCode = hashCode * 59 + this.AuthenticationAlgorithm.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
