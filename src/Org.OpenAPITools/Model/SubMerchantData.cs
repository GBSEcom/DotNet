/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.4.0.20210824.002
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Once sub-merchant element is given, the transaction is considered to be a sub-merchant transaction.
    /// </summary>
    [DataContract(Name = "SubMerchantData")]
    public partial class SubMerchantData : IEquatable<SubMerchantData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubMerchantData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubMerchantData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubMerchantData" /> class.
        /// </summary>
        /// <param name="mcc">Merchant category code. (required).</param>
        /// <param name="legalName">Store legal name..</param>
        /// <param name="email">Sub-merchant email..</param>
        /// <param name="timezone">Timezone..</param>
        /// <param name="address">address.</param>
        /// <param name="document">document.</param>
        /// <param name="merchantId">Sub-merchant ID..</param>
        public SubMerchantData(string mcc = default(string), string legalName = default(string), string email = default(string), string timezone = default(string), Address address = default(Address), Document document = default(Document), string merchantId = default(string))
        {
            // to ensure "mcc" is required (not null)
            this.Mcc = mcc ?? throw new ArgumentNullException("mcc is a required property for SubMerchantData and cannot be null");
            this.LegalName = legalName;
            this.Email = email;
            this.Timezone = timezone;
            this.Address = address;
            this.Document = document;
            this.MerchantId = merchantId;
        }

        /// <summary>
        /// Merchant category code.
        /// </summary>
        /// <value>Merchant category code.</value>
        [DataMember(Name = "mcc", IsRequired = true, EmitDefaultValue = false)]
        public string Mcc { get; set; }

        /// <summary>
        /// Store legal name.
        /// </summary>
        /// <value>Store legal name.</value>
        [DataMember(Name = "legalName", EmitDefaultValue = false)]
        public string LegalName { get; set; }

        /// <summary>
        /// Sub-merchant email.
        /// </summary>
        /// <value>Sub-merchant email.</value>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Timezone.
        /// </summary>
        /// <value>Timezone.</value>
        [DataMember(Name = "timezone", EmitDefaultValue = false)]
        public string Timezone { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public Address Address { get; set; }

        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [DataMember(Name = "document", EmitDefaultValue = false)]
        public Document Document { get; set; }

        /// <summary>
        /// Sub-merchant ID.
        /// </summary>
        /// <value>Sub-merchant ID.</value>
        [DataMember(Name = "merchantId", EmitDefaultValue = false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubMerchantData {\n");
            sb.Append("  Mcc: ").Append(Mcc).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Document: ").Append(Document).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubMerchantData);
        }

        /// <summary>
        /// Returns true if SubMerchantData instances are equal
        /// </summary>
        /// <param name="input">Instance of SubMerchantData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubMerchantData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Mcc == input.Mcc ||
                    (this.Mcc != null &&
                    this.Mcc.Equals(input.Mcc))
                ) && 
                (
                    this.LegalName == input.LegalName ||
                    (this.LegalName != null &&
                    this.LegalName.Equals(input.LegalName))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Document == input.Document ||
                    (this.Document != null &&
                    this.Document.Equals(input.Document))
                ) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Mcc != null)
                    hashCode = hashCode * 59 + this.Mcc.GetHashCode();
                if (this.LegalName != null)
                    hashCode = hashCode * 59 + this.LegalName.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Document != null)
                    hashCode = hashCode * 59 + this.Document.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Mcc (string) pattern
            Regex regexMcc = new Regex(@"[0-9]{4}", RegexOptions.CultureInvariant);
            if (false == regexMcc.Match(this.Mcc).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Mcc, must match a pattern of " + regexMcc, new [] { "Mcc" });
            }

            // LegalName (string) maxLength
            if(this.LegalName != null && this.LegalName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LegalName, length must be less than 100.", new [] { "LegalName" });
            }

            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 254)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 254.", new [] { "Email" });
            }

            // Timezone (string) maxLength
            if(this.Timezone != null && this.Timezone.Length > 500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Timezone, length must be less than 500.", new [] { "Timezone" });
            }

            // MerchantId (string) maxLength
            if(this.MerchantId != null && this.MerchantId.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantId, length must be less than 50.", new [] { "MerchantId" });
            }

            yield break;
        }
    }
}
