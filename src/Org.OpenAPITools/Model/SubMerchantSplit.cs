/*
 * Payment Gateway API Specification.
 *
 * The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.
 *
 * The version of the OpenAPI document: 21.4.0.20210824.002
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Sub-merchant split object for SettlementSplit.
    /// </summary>
    [DataContract(Name = "SubMerchantSplit")]
    public partial class SubMerchantSplit : IEquatable<SubMerchantSplit>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubMerchantSplit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubMerchantSplit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubMerchantSplit" /> class.
        /// </summary>
        /// <param name="merchantID">ID of merchant for tracking. (required).</param>
        /// <param name="amount">The amount each sub-merchant receives. (required).</param>
        public SubMerchantSplit(string merchantID = default(string), decimal amount = default(decimal))
        {
            // to ensure "merchantID" is required (not null)
            this.MerchantID = merchantID ?? throw new ArgumentNullException("merchantID is a required property for SubMerchantSplit and cannot be null");
            this.Amount = amount;
        }

        /// <summary>
        /// ID of merchant for tracking.
        /// </summary>
        /// <value>ID of merchant for tracking.</value>
        [DataMember(Name = "merchantID", IsRequired = true, EmitDefaultValue = false)]
        public string MerchantID { get; set; }

        /// <summary>
        /// The amount each sub-merchant receives.
        /// </summary>
        /// <value>The amount each sub-merchant receives.</value>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = false)]
        public decimal Amount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubMerchantSplit {\n");
            sb.Append("  MerchantID: ").Append(MerchantID).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubMerchantSplit);
        }

        /// <summary>
        /// Returns true if SubMerchantSplit instances are equal
        /// </summary>
        /// <param name="input">Instance of SubMerchantSplit to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubMerchantSplit input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MerchantID == input.MerchantID ||
                    (this.MerchantID != null &&
                    this.MerchantID.Equals(input.MerchantID))
                ) && 
                (
                    this.Amount == input.Amount ||
                    this.Amount.Equals(input.Amount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MerchantID != null)
                    hashCode = hashCode * 59 + this.MerchantID.GetHashCode();
                hashCode = hashCode * 59 + this.Amount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // MerchantID (string) maxLength
            if(this.MerchantID != null && this.MerchantID.Length > 15)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantID, length must be less than 15.", new [] { "MerchantID" });
            }

            // MerchantID (string) pattern
            Regex regexMerchantID = new Regex(@"[0-9]{1,15}", RegexOptions.CultureInvariant);
            if (false == regexMerchantID.Match(this.MerchantID).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantID, must match a pattern of " + regexMerchantID, new [] { "MerchantID" });
            }

            yield break;
        }
    }
}
